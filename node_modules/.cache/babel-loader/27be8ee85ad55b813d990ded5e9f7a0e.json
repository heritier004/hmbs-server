{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/heritier/repos/github/hmbs-server/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/Users/heritier/repos/github/hmbs-server/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _inherits = require(\"/Users/heritier/repos/github/hmbs-server/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"/Users/heritier/repos/github/hmbs-server/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nvar EventEmitter = require('events');\n\nvar packageData = require('../../package.json');\n\nvar shared = require('../shared');\n\nvar LeWindows = require('../mime-node/le-windows');\n/**\n * Generates a Transport object for AWS SES\n *\n * Possible options can be the following:\n *\n *  * **sendingRate** optional Number specifying how many messages per second should be delivered to SES\n *  * **maxConnections** optional Number specifying max number of parallel connections to SES\n *\n * @constructor\n * @param {Object} optional config parameter\n */\n\n\nvar SESTransport = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(SESTransport, _EventEmitter);\n\n  var _super = _createSuper(SESTransport);\n\n  function SESTransport(options) {\n    var _this;\n\n    _classCallCheck(this, SESTransport);\n\n    _this = _super.call(this);\n    options = options || {};\n    _this.options = options || {};\n    _this.ses = _this.options.SES;\n    _this.name = 'SESTransport';\n    _this.version = packageData.version;\n    _this.logger = shared.getLogger(_this.options, {\n      component: _this.options.component || 'ses-transport'\n    }); // parallel sending connections\n\n    _this.maxConnections = Number(_this.options.maxConnections) || Infinity;\n    _this.connections = 0; // max messages per second\n\n    _this.sendingRate = Number(_this.options.sendingRate) || Infinity;\n    _this.sendingRateTTL = null;\n    _this.rateInterval = 1000; // milliseconds\n\n    _this.rateMessages = [];\n    _this.pending = [];\n    _this.idling = true;\n    setImmediate(function () {\n      if (_this.idling) {\n        _this.emit('idle');\n      }\n    });\n    return _this;\n  }\n  /**\n   * Schedules a sending of a message\n   *\n   * @param {Object} emailMessage MailComposer object\n   * @param {Function} callback Callback function to run when the sending is completed\n   */\n\n\n  _createClass(SESTransport, [{\n    key: \"send\",\n    value: function send(mail, callback) {\n      var _this2 = this;\n\n      if (this.connections >= this.maxConnections) {\n        this.idling = false;\n        return this.pending.push({\n          mail: mail,\n          callback: callback\n        });\n      }\n\n      if (!this._checkSendingRate()) {\n        this.idling = false;\n        return this.pending.push({\n          mail: mail,\n          callback: callback\n        });\n      }\n\n      this._send(mail, function () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        setImmediate(function () {\n          return callback.apply(void 0, args);\n        });\n\n        _this2._sent();\n      });\n    }\n  }, {\n    key: \"_checkRatedQueue\",\n    value: function _checkRatedQueue() {\n      var _this3 = this;\n\n      if (this.connections >= this.maxConnections || !this._checkSendingRate()) {\n        return;\n      }\n\n      if (!this.pending.length) {\n        if (!this.idling) {\n          this.idling = true;\n          this.emit('idle');\n        }\n\n        return;\n      }\n\n      var next = this.pending.shift();\n\n      this._send(next.mail, function () {\n        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          args[_key2] = arguments[_key2];\n        }\n\n        setImmediate(function () {\n          return next.callback.apply(next, args);\n        });\n\n        _this3._sent();\n      });\n    }\n  }, {\n    key: \"_checkSendingRate\",\n    value: function _checkSendingRate() {\n      var _this4 = this;\n\n      clearTimeout(this.sendingRateTTL);\n      var now = Date.now();\n      var oldest = false; // delete older messages\n\n      for (var i = this.rateMessages.length - 1; i >= 0; i--) {\n        if (this.rateMessages[i].ts >= now - this.rateInterval && (!oldest || this.rateMessages[i].ts < oldest)) {\n          oldest = this.rateMessages[i].ts;\n        }\n\n        if (this.rateMessages[i].ts < now - this.rateInterval && !this.rateMessages[i].pending) {\n          this.rateMessages.splice(i, 1);\n        }\n      }\n\n      if (this.rateMessages.length < this.sendingRate) {\n        return true;\n      }\n\n      var delay = Math.max(oldest + 1001, now + 20);\n      this.sendingRateTTL = setTimeout(function () {\n        return _this4._checkRatedQueue();\n      }, now - delay);\n\n      try {\n        this.sendingRateTTL.unref();\n      } catch (E) {// Ignore. Happens on envs with non-node timer implementation\n      }\n\n      return false;\n    }\n  }, {\n    key: \"_sent\",\n    value: function _sent() {\n      this.connections--;\n\n      this._checkRatedQueue();\n    }\n    /**\n     * Returns true if there are free slots in the queue\n     */\n\n  }, {\n    key: \"isIdle\",\n    value: function isIdle() {\n      return this.idling;\n    }\n    /**\n     * Compiles a mailcomposer message and forwards it to SES\n     *\n     * @param {Object} emailMessage MailComposer object\n     * @param {Function} callback Callback function to run when the sending is completed\n     */\n\n  }, {\n    key: \"_send\",\n    value: function _send(mail, callback) {\n      var _this5 = this;\n\n      var statObject = {\n        ts: Date.now(),\n        pending: true\n      };\n      this.connections++;\n      this.rateMessages.push(statObject);\n      var envelope = mail.data.envelope || mail.message.getEnvelope();\n      var messageId = mail.message.messageId();\n      var recipients = [].concat(envelope.to || []);\n\n      if (recipients.length > 3) {\n        recipients.push('...and ' + recipients.splice(2).length + ' more');\n      }\n\n      this.logger.info({\n        tnx: 'send',\n        messageId: messageId\n      }, 'Sending message %s to <%s>', messageId, recipients.join(', '));\n\n      var getRawMessage = function getRawMessage(next) {\n        // do not use Message-ID and Date in DKIM signature\n        if (!mail.data._dkim) {\n          mail.data._dkim = {};\n        }\n\n        if (mail.data._dkim.skipFields && typeof mail.data._dkim.skipFields === 'string') {\n          mail.data._dkim.skipFields += ':date:message-id';\n        } else {\n          mail.data._dkim.skipFields = 'date:message-id';\n        }\n\n        var sourceStream = mail.message.createReadStream();\n        var stream = sourceStream.pipe(new LeWindows());\n        var chunks = [];\n        var chunklen = 0;\n        stream.on('readable', function () {\n          var chunk;\n\n          while ((chunk = stream.read()) !== null) {\n            chunks.push(chunk);\n            chunklen += chunk.length;\n          }\n        });\n        sourceStream.once('error', function (err) {\n          return stream.emit('error', err);\n        });\n        stream.once('error', function (err) {\n          next(err);\n        });\n        stream.once('end', function () {\n          return next(null, Buffer.concat(chunks, chunklen));\n        });\n      };\n\n      setImmediate(function () {\n        return getRawMessage(function (err, raw) {\n          if (err) {\n            _this5.logger.error({\n              err: err,\n              tnx: 'send',\n              messageId: messageId\n            }, 'Failed creating message for %s. %s', messageId, err.message);\n\n            statObject.pending = false;\n            return callback(err);\n          }\n\n          var sesMessage = {\n            RawMessage: {\n              // required\n              Data: raw // required\n\n            },\n            Source: envelope.from,\n            Destinations: envelope.to\n          };\n          Object.keys(mail.data.ses || {}).forEach(function (key) {\n            sesMessage[key] = mail.data.ses[key];\n          });\n          var ses = (_this5.ses.aws ? _this5.ses.ses : _this5.ses) || {};\n          var aws = _this5.ses.aws || {};\n\n          var getRegion = function getRegion(cb) {\n            if (ses.config && typeof ses.config.region === 'function') {\n              // promise\n              return ses.config.region().then(function (region) {\n                return cb(null, region);\n              }).catch(function (err) {\n                return cb(err);\n              });\n            }\n\n            return cb(null, ses.config && ses.config.region || 'us-east-1');\n          };\n\n          getRegion(function (err, region) {\n            if (err || !region) {\n              region = 'us-east-1';\n            }\n\n            var sendPromise;\n\n            if (typeof ses.send === 'function' && aws.SendRawEmailCommand) {\n              // v3 API\n              sendPromise = ses.send(new aws.SendRawEmailCommand(sesMessage));\n            } else {\n              // v2 API\n              sendPromise = ses.sendRawEmail(sesMessage).promise();\n            }\n\n            sendPromise.then(function (data) {\n              if (region === 'us-east-1') {\n                region = 'email';\n              }\n\n              statObject.pending = false;\n              callback(null, {\n                envelope: {\n                  from: envelope.from,\n                  to: envelope.to\n                },\n                messageId: '<' + data.MessageId + (!/@/.test(data.MessageId) ? '@' + region + '.amazonses.com' : '') + '>',\n                response: data.MessageId,\n                raw: raw\n              });\n            }).catch(function (err) {\n              _this5.logger.error({\n                err: err,\n                tnx: 'send'\n              }, 'Send error for %s: %s', messageId, err.message);\n\n              statObject.pending = false;\n              callback(err);\n            });\n          });\n        });\n      });\n    }\n    /**\n     * Verifies SES configuration\n     *\n     * @param {Function} callback Callback function\n     */\n\n  }, {\n    key: \"verify\",\n    value: function verify(callback) {\n      var promise;\n      var ses = (this.ses.aws ? this.ses.ses : this.ses) || {};\n      var aws = this.ses.aws || {};\n      var sesMessage = {\n        RawMessage: {\n          // required\n          Data: 'From: invalid@invalid\\r\\nTo: invalid@invalid\\r\\n Subject: Invalid\\r\\n\\r\\nInvalid'\n        },\n        Source: 'invalid@invalid',\n        Destinations: ['invalid@invalid']\n      };\n\n      if (!callback) {\n        promise = new Promise(function (resolve, reject) {\n          callback = shared.callbackPromise(resolve, reject);\n        });\n      }\n\n      var cb = function cb(err) {\n        if (err && (err.code || err.Code) !== 'InvalidParameterValue') {\n          return callback(err);\n        }\n\n        return callback(null, true);\n      };\n\n      if (typeof ses.send === 'function' && aws.SendRawEmailCommand) {\n        // v3 API\n        sesMessage.RawMessage.Data = Buffer.from(sesMessage.RawMessage.Data);\n        ses.send(new aws.SendRawEmailCommand(sesMessage), cb);\n      } else {\n        // v2 API\n        ses.sendRawEmail(sesMessage, cb);\n      }\n\n      return promise;\n    }\n  }]);\n\n  return SESTransport;\n}(EventEmitter);\n\nmodule.exports = SESTransport;","map":{"version":3,"names":["EventEmitter","require","packageData","shared","LeWindows","SESTransport","options","ses","SES","name","version","logger","getLogger","component","maxConnections","Number","Infinity","connections","sendingRate","sendingRateTTL","rateInterval","rateMessages","pending","idling","setImmediate","emit","mail","callback","push","_checkSendingRate","_send","args","_sent","length","next","shift","clearTimeout","now","Date","oldest","i","ts","splice","delay","Math","max","setTimeout","_checkRatedQueue","unref","E","statObject","envelope","data","message","getEnvelope","messageId","recipients","concat","to","info","tnx","join","getRawMessage","_dkim","skipFields","sourceStream","createReadStream","stream","pipe","chunks","chunklen","on","chunk","read","once","err","Buffer","raw","error","sesMessage","RawMessage","Data","Source","from","Destinations","Object","keys","forEach","key","aws","getRegion","cb","config","region","then","catch","sendPromise","send","SendRawEmailCommand","sendRawEmail","promise","MessageId","test","response","Promise","resolve","reject","callbackPromise","code","Code","module","exports"],"sources":["/Users/heritier/repos/github/hmbs-server/node_modules/nodemailer/lib/ses-transport/index.js"],"sourcesContent":["'use strict';\n\nconst EventEmitter = require('events');\nconst packageData = require('../../package.json');\nconst shared = require('../shared');\nconst LeWindows = require('../mime-node/le-windows');\n\n/**\n * Generates a Transport object for AWS SES\n *\n * Possible options can be the following:\n *\n *  * **sendingRate** optional Number specifying how many messages per second should be delivered to SES\n *  * **maxConnections** optional Number specifying max number of parallel connections to SES\n *\n * @constructor\n * @param {Object} optional config parameter\n */\nclass SESTransport extends EventEmitter {\n    constructor(options) {\n        super();\n        options = options || {};\n\n        this.options = options || {};\n        this.ses = this.options.SES;\n\n        this.name = 'SESTransport';\n        this.version = packageData.version;\n\n        this.logger = shared.getLogger(this.options, {\n            component: this.options.component || 'ses-transport'\n        });\n\n        // parallel sending connections\n        this.maxConnections = Number(this.options.maxConnections) || Infinity;\n        this.connections = 0;\n\n        // max messages per second\n        this.sendingRate = Number(this.options.sendingRate) || Infinity;\n        this.sendingRateTTL = null;\n        this.rateInterval = 1000; // milliseconds\n        this.rateMessages = [];\n\n        this.pending = [];\n\n        this.idling = true;\n\n        setImmediate(() => {\n            if (this.idling) {\n                this.emit('idle');\n            }\n        });\n    }\n\n    /**\n     * Schedules a sending of a message\n     *\n     * @param {Object} emailMessage MailComposer object\n     * @param {Function} callback Callback function to run when the sending is completed\n     */\n    send(mail, callback) {\n        if (this.connections >= this.maxConnections) {\n            this.idling = false;\n            return this.pending.push({\n                mail,\n                callback\n            });\n        }\n\n        if (!this._checkSendingRate()) {\n            this.idling = false;\n            return this.pending.push({\n                mail,\n                callback\n            });\n        }\n\n        this._send(mail, (...args) => {\n            setImmediate(() => callback(...args));\n            this._sent();\n        });\n    }\n\n    _checkRatedQueue() {\n        if (this.connections >= this.maxConnections || !this._checkSendingRate()) {\n            return;\n        }\n\n        if (!this.pending.length) {\n            if (!this.idling) {\n                this.idling = true;\n                this.emit('idle');\n            }\n            return;\n        }\n\n        let next = this.pending.shift();\n        this._send(next.mail, (...args) => {\n            setImmediate(() => next.callback(...args));\n            this._sent();\n        });\n    }\n\n    _checkSendingRate() {\n        clearTimeout(this.sendingRateTTL);\n\n        let now = Date.now();\n        let oldest = false;\n        // delete older messages\n        for (let i = this.rateMessages.length - 1; i >= 0; i--) {\n            if (this.rateMessages[i].ts >= now - this.rateInterval && (!oldest || this.rateMessages[i].ts < oldest)) {\n                oldest = this.rateMessages[i].ts;\n            }\n\n            if (this.rateMessages[i].ts < now - this.rateInterval && !this.rateMessages[i].pending) {\n                this.rateMessages.splice(i, 1);\n            }\n        }\n\n        if (this.rateMessages.length < this.sendingRate) {\n            return true;\n        }\n\n        let delay = Math.max(oldest + 1001, now + 20);\n        this.sendingRateTTL = setTimeout(() => this._checkRatedQueue(), now - delay);\n\n        try {\n            this.sendingRateTTL.unref();\n        } catch (E) {\n            // Ignore. Happens on envs with non-node timer implementation\n        }\n\n        return false;\n    }\n\n    _sent() {\n        this.connections--;\n        this._checkRatedQueue();\n    }\n\n    /**\n     * Returns true if there are free slots in the queue\n     */\n    isIdle() {\n        return this.idling;\n    }\n\n    /**\n     * Compiles a mailcomposer message and forwards it to SES\n     *\n     * @param {Object} emailMessage MailComposer object\n     * @param {Function} callback Callback function to run when the sending is completed\n     */\n    _send(mail, callback) {\n        let statObject = {\n            ts: Date.now(),\n            pending: true\n        };\n        this.connections++;\n        this.rateMessages.push(statObject);\n\n        let envelope = mail.data.envelope || mail.message.getEnvelope();\n        let messageId = mail.message.messageId();\n\n        let recipients = [].concat(envelope.to || []);\n        if (recipients.length > 3) {\n            recipients.push('...and ' + recipients.splice(2).length + ' more');\n        }\n        this.logger.info(\n            {\n                tnx: 'send',\n                messageId\n            },\n            'Sending message %s to <%s>',\n            messageId,\n            recipients.join(', ')\n        );\n\n        let getRawMessage = next => {\n            // do not use Message-ID and Date in DKIM signature\n            if (!mail.data._dkim) {\n                mail.data._dkim = {};\n            }\n            if (mail.data._dkim.skipFields && typeof mail.data._dkim.skipFields === 'string') {\n                mail.data._dkim.skipFields += ':date:message-id';\n            } else {\n                mail.data._dkim.skipFields = 'date:message-id';\n            }\n\n            let sourceStream = mail.message.createReadStream();\n            let stream = sourceStream.pipe(new LeWindows());\n            let chunks = [];\n            let chunklen = 0;\n\n            stream.on('readable', () => {\n                let chunk;\n                while ((chunk = stream.read()) !== null) {\n                    chunks.push(chunk);\n                    chunklen += chunk.length;\n                }\n            });\n\n            sourceStream.once('error', err => stream.emit('error', err));\n\n            stream.once('error', err => {\n                next(err);\n            });\n\n            stream.once('end', () => next(null, Buffer.concat(chunks, chunklen)));\n        };\n\n        setImmediate(() =>\n            getRawMessage((err, raw) => {\n                if (err) {\n                    this.logger.error(\n                        {\n                            err,\n                            tnx: 'send',\n                            messageId\n                        },\n                        'Failed creating message for %s. %s',\n                        messageId,\n                        err.message\n                    );\n                    statObject.pending = false;\n                    return callback(err);\n                }\n\n                let sesMessage = {\n                    RawMessage: {\n                        // required\n                        Data: raw // required\n                    },\n                    Source: envelope.from,\n                    Destinations: envelope.to\n                };\n\n                Object.keys(mail.data.ses || {}).forEach(key => {\n                    sesMessage[key] = mail.data.ses[key];\n                });\n\n                let ses = (this.ses.aws ? this.ses.ses : this.ses) || {};\n                let aws = this.ses.aws || {};\n\n                let getRegion = cb => {\n                    if (ses.config && typeof ses.config.region === 'function') {\n                        // promise\n                        return ses.config\n                            .region()\n                            .then(region => cb(null, region))\n                            .catch(err => cb(err));\n                    }\n                    return cb(null, (ses.config && ses.config.region) || 'us-east-1');\n                };\n\n                getRegion((err, region) => {\n                    if (err || !region) {\n                        region = 'us-east-1';\n                    }\n\n                    let sendPromise;\n                    if (typeof ses.send === 'function' && aws.SendRawEmailCommand) {\n                        // v3 API\n                        sendPromise = ses.send(new aws.SendRawEmailCommand(sesMessage));\n                    } else {\n                        // v2 API\n                        sendPromise = ses.sendRawEmail(sesMessage).promise();\n                    }\n\n                    sendPromise\n                        .then(data => {\n                            if (region === 'us-east-1') {\n                                region = 'email';\n                            }\n\n                            statObject.pending = false;\n                            callback(null, {\n                                envelope: {\n                                    from: envelope.from,\n                                    to: envelope.to\n                                },\n                                messageId: '<' + data.MessageId + (!/@/.test(data.MessageId) ? '@' + region + '.amazonses.com' : '') + '>',\n                                response: data.MessageId,\n                                raw\n                            });\n                        })\n                        .catch(err => {\n                            this.logger.error(\n                                {\n                                    err,\n                                    tnx: 'send'\n                                },\n                                'Send error for %s: %s',\n                                messageId,\n                                err.message\n                            );\n                            statObject.pending = false;\n                            callback(err);\n                        });\n                });\n            })\n        );\n    }\n\n    /**\n     * Verifies SES configuration\n     *\n     * @param {Function} callback Callback function\n     */\n    verify(callback) {\n        let promise;\n        let ses = (this.ses.aws ? this.ses.ses : this.ses) || {};\n        let aws = this.ses.aws || {};\n\n        const sesMessage = {\n            RawMessage: {\n                // required\n                Data: 'From: invalid@invalid\\r\\nTo: invalid@invalid\\r\\n Subject: Invalid\\r\\n\\r\\nInvalid'\n            },\n            Source: 'invalid@invalid',\n            Destinations: ['invalid@invalid']\n        };\n\n        if (!callback) {\n            promise = new Promise((resolve, reject) => {\n                callback = shared.callbackPromise(resolve, reject);\n            });\n        }\n        const cb = err => {\n            if (err && (err.code || err.Code) !== 'InvalidParameterValue') {\n                return callback(err);\n            }\n            return callback(null, true);\n        };\n\n        if (typeof ses.send === 'function' && aws.SendRawEmailCommand) {\n            // v3 API\n            sesMessage.RawMessage.Data = Buffer.from(sesMessage.RawMessage.Data);\n            ses.send(new aws.SendRawEmailCommand(sesMessage), cb);\n        } else {\n            // v2 API\n            ses.sendRawEmail(sesMessage, cb);\n        }\n\n        return promise;\n    }\n}\n\nmodule.exports = SESTransport;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}