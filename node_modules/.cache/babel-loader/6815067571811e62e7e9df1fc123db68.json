{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/heritier/repos/github/hmbs-server/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/Users/heritier/repos/github/hmbs-server/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _inherits = require(\"/Users/heritier/repos/github/hmbs-server/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"/Users/heritier/repos/github/hmbs-server/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nvar packageInfo = require('../../package.json');\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar net = require('net');\n\nvar tls = require('tls');\n\nvar os = require('os');\n\nvar crypto = require('crypto');\n\nvar DataStream = require('./data-stream');\n\nvar PassThrough = require('stream').PassThrough;\n\nvar shared = require('../shared'); // default timeout values in ms\n\n\nvar CONNECTION_TIMEOUT = 2 * 60 * 1000; // how much to wait for the connection to be established\n\nvar SOCKET_TIMEOUT = 10 * 60 * 1000; // how much to wait for socket inactivity before disconnecting the client\n\nvar GREETING_TIMEOUT = 30 * 1000; // how much to wait after connection is established but SMTP greeting is not receieved\n\n/**\n * Generates a SMTP connection object\n *\n * Optional options object takes the following possible properties:\n *\n *  * **port** - is the port to connect to (defaults to 587 or 465)\n *  * **host** - is the hostname or IP address to connect to (defaults to 'localhost')\n *  * **secure** - use SSL\n *  * **ignoreTLS** - ignore server support for STARTTLS\n *  * **requireTLS** - forces the client to use STARTTLS\n *  * **name** - the name of the client server\n *  * **localAddress** - outbound address to bind to (see: http://nodejs.org/api/net.html#net_net_connect_options_connectionlistener)\n *  * **greetingTimeout** - Time to wait in ms until greeting message is received from the server (defaults to 10000)\n *  * **connectionTimeout** - how many milliseconds to wait for the connection to establish\n *  * **socketTimeout** - Time of inactivity until the connection is closed (defaults to 1 hour)\n *  * **lmtp** - if true, uses LMTP instead of SMTP protocol\n *  * **logger** - bunyan compatible logger interface\n *  * **debug** - if true pass SMTP traffic to the logger\n *  * **tls** - options for createCredentials\n *  * **socket** - existing socket to use instead of creating a new one (see: http://nodejs.org/api/net.html#net_class_net_socket)\n *  * **secured** - boolean indicates that the provided socket has already been upgraded to tls\n *\n * @constructor\n * @namespace SMTP Client module\n * @param {Object} [options] Option properties\n */\n\nvar SMTPConnection = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(SMTPConnection, _EventEmitter);\n\n  var _super = _createSuper(SMTPConnection);\n\n  function SMTPConnection(options) {\n    var _this;\n\n    _classCallCheck(this, SMTPConnection);\n\n    _this = _super.call(this, options);\n    _this.id = crypto.randomBytes(8).toString('base64').replace(/\\W/g, '');\n    _this.stage = 'init';\n    _this.options = options || {};\n    _this.secureConnection = !!_this.options.secure;\n    _this.alreadySecured = !!_this.options.secured;\n    _this.port = Number(_this.options.port) || (_this.secureConnection ? 465 : 587);\n    _this.host = _this.options.host || 'localhost';\n    _this.allowInternalNetworkInterfaces = _this.options.allowInternalNetworkInterfaces || false;\n\n    if (typeof _this.options.secure === 'undefined' && _this.port === 465) {\n      // if secure option is not set but port is 465, then default to secure\n      _this.secureConnection = true;\n    }\n\n    _this.name = _this.options.name || _this._getHostname();\n    _this.logger = shared.getLogger(_this.options, {\n      component: _this.options.component || 'smtp-connection',\n      sid: _this.id\n    });\n    _this.customAuth = new Map();\n    Object.keys(_this.options.customAuth || {}).forEach(function (key) {\n      var mapKey = (key || '').toString().trim().toUpperCase();\n\n      if (!mapKey) {\n        return;\n      }\n\n      _this.customAuth.set(mapKey, _this.options.customAuth[key]);\n    });\n    /**\n     * Expose version nr, just for the reference\n     * @type {String}\n     */\n\n    _this.version = packageInfo.version;\n    /**\n     * If true, then the user is authenticated\n     * @type {Boolean}\n     */\n\n    _this.authenticated = false;\n    /**\n     * If set to true, this instance is no longer active\n     * @private\n     */\n\n    _this.destroyed = false;\n    /**\n     * Defines if the current connection is secure or not. If not,\n     * STARTTLS can be used if available\n     * @private\n     */\n\n    _this.secure = !!_this.secureConnection;\n    /**\n     * Store incomplete messages coming from the server\n     * @private\n     */\n\n    _this._remainder = '';\n    /**\n     * Unprocessed responses from the server\n     * @type {Array}\n     */\n\n    _this._responseQueue = [];\n    _this.lastServerResponse = false;\n    /**\n     * The socket connecting to the server\n     * @publick\n     */\n\n    _this._socket = false;\n    /**\n     * Lists supported auth mechanisms\n     * @private\n     */\n\n    _this._supportedAuth = [];\n    /**\n     * Set to true, if EHLO response includes \"AUTH\".\n     * If false then authentication is not tried\n     */\n\n    _this.allowsAuth = false;\n    /**\n     * Includes current envelope (from, to)\n     * @private\n     */\n\n    _this._envelope = false;\n    /**\n     * Lists supported extensions\n     * @private\n     */\n\n    _this._supportedExtensions = [];\n    /**\n     * Defines the maximum allowed size for a single message\n     * @private\n     */\n\n    _this._maxAllowedSize = 0;\n    /**\n     * Function queue to run if a data chunk comes from the server\n     * @private\n     */\n\n    _this._responseActions = [];\n    _this._recipientQueue = [];\n    /**\n     * Timeout variable for waiting the greeting\n     * @private\n     */\n\n    _this._greetingTimeout = false;\n    /**\n     * Timeout variable for waiting the connection to start\n     * @private\n     */\n\n    _this._connectionTimeout = false;\n    /**\n     * If the socket is deemed already closed\n     * @private\n     */\n\n    _this._destroyed = false;\n    /**\n     * If the socket is already being closed\n     * @private\n     */\n\n    _this._closing = false;\n    /**\n     * Callbacks for socket's listeners\n     */\n\n    _this._onSocketData = function (chunk) {\n      return _this._onData(chunk);\n    };\n\n    _this._onSocketError = function (error) {\n      return _this._onError(error, 'ESOCKET', false, 'CONN');\n    };\n\n    _this._onSocketClose = function () {\n      return _this._onClose();\n    };\n\n    _this._onSocketEnd = function () {\n      return _this._onEnd();\n    };\n\n    _this._onSocketTimeout = function () {\n      return _this._onTimeout();\n    };\n\n    return _this;\n  }\n  /**\n   * Creates a connection to a SMTP server and sets up connection\n   * listener\n   */\n\n\n  _createClass(SMTPConnection, [{\n    key: \"connect\",\n    value: function connect(connectCallback) {\n      var _this2 = this;\n\n      if (typeof connectCallback === 'function') {\n        this.once('connect', function () {\n          _this2.logger.debug({\n            tnx: 'smtp'\n          }, 'SMTP handshake finished');\n\n          connectCallback();\n        });\n\n        var isDestroyedMessage = this._isDestroyedMessage('connect');\n\n        if (isDestroyedMessage) {\n          return connectCallback(this._formatError(isDestroyedMessage, 'ECONNECTION', false, 'CONN'));\n        }\n      }\n\n      var opts = {\n        port: this.port,\n        host: this.host,\n        allowInternalNetworkInterfaces: this.allowInternalNetworkInterfaces\n      };\n\n      if (this.options.localAddress) {\n        opts.localAddress = this.options.localAddress;\n      }\n\n      var setupConnectionHandlers = function setupConnectionHandlers() {\n        _this2._connectionTimeout = setTimeout(function () {\n          _this2._onError('Connection timeout', 'ETIMEDOUT', false, 'CONN');\n        }, _this2.options.connectionTimeout || CONNECTION_TIMEOUT);\n\n        _this2._socket.on('error', _this2._onSocketError);\n      };\n\n      if (this.options.connection) {\n        // connection is already opened\n        this._socket = this.options.connection;\n\n        if (this.secureConnection && !this.alreadySecured) {\n          setImmediate(function () {\n            return _this2._upgradeConnection(function (err) {\n              if (err) {\n                _this2._onError(new Error('Error initiating TLS - ' + (err.message || err)), 'ETLS', false, 'CONN');\n\n                return;\n              }\n\n              _this2._onConnect();\n            });\n          });\n        } else {\n          setImmediate(function () {\n            return _this2._onConnect();\n          });\n        }\n\n        return;\n      } else if (this.options.socket) {\n        // socket object is set up but not yet connected\n        this._socket = this.options.socket;\n        return shared.resolveHostname(opts, function (err, resolved) {\n          if (err) {\n            return setImmediate(function () {\n              return _this2._onError(err, 'EDNS', false, 'CONN');\n            });\n          }\n\n          _this2.logger.debug({\n            tnx: 'dns',\n            source: opts.host,\n            resolved: resolved.host,\n            cached: !!resolved.cached\n          }, 'Resolved %s as %s [cache %s]', opts.host, resolved.host, resolved.cached ? 'hit' : 'miss');\n\n          Object.keys(resolved).forEach(function (key) {\n            if (key.charAt(0) !== '_' && resolved[key]) {\n              opts[key] = resolved[key];\n            }\n          });\n\n          try {\n            _this2._socket.connect(_this2.port, _this2.host, function () {\n              _this2._socket.setKeepAlive(true);\n\n              _this2._onConnect();\n            });\n\n            setupConnectionHandlers();\n          } catch (E) {\n            return setImmediate(function () {\n              return _this2._onError(E, 'ECONNECTION', false, 'CONN');\n            });\n          }\n        });\n      } else if (this.secureConnection) {\n        // connect using tls\n        if (this.options.tls) {\n          Object.keys(this.options.tls).forEach(function (key) {\n            opts[key] = _this2.options.tls[key];\n          });\n        }\n\n        return shared.resolveHostname(opts, function (err, resolved) {\n          if (err) {\n            return setImmediate(function () {\n              return _this2._onError(err, 'EDNS', false, 'CONN');\n            });\n          }\n\n          _this2.logger.debug({\n            tnx: 'dns',\n            source: opts.host,\n            resolved: resolved.host,\n            cached: !!resolved.cached\n          }, 'Resolved %s as %s [cache %s]', opts.host, resolved.host, resolved.cached ? 'hit' : 'miss');\n\n          Object.keys(resolved).forEach(function (key) {\n            if (key.charAt(0) !== '_' && resolved[key]) {\n              opts[key] = resolved[key];\n            }\n          });\n\n          try {\n            _this2._socket = tls.connect(opts, function () {\n              _this2._socket.setKeepAlive(true);\n\n              _this2._onConnect();\n            });\n            setupConnectionHandlers();\n          } catch (E) {\n            return setImmediate(function () {\n              return _this2._onError(E, 'ECONNECTION', false, 'CONN');\n            });\n          }\n        });\n      } else {\n        // connect using plaintext\n        return shared.resolveHostname(opts, function (err, resolved) {\n          if (err) {\n            return setImmediate(function () {\n              return _this2._onError(err, 'EDNS', false, 'CONN');\n            });\n          }\n\n          _this2.logger.debug({\n            tnx: 'dns',\n            source: opts.host,\n            resolved: resolved.host,\n            cached: !!resolved.cached\n          }, 'Resolved %s as %s [cache %s]', opts.host, resolved.host, resolved.cached ? 'hit' : 'miss');\n\n          Object.keys(resolved).forEach(function (key) {\n            if (key.charAt(0) !== '_' && resolved[key]) {\n              opts[key] = resolved[key];\n            }\n          });\n\n          try {\n            _this2._socket = net.connect(opts, function () {\n              _this2._socket.setKeepAlive(true);\n\n              _this2._onConnect();\n            });\n            setupConnectionHandlers();\n          } catch (E) {\n            return setImmediate(function () {\n              return _this2._onError(E, 'ECONNECTION', false, 'CONN');\n            });\n          }\n        });\n      }\n    }\n    /**\n     * Sends QUIT\n     */\n\n  }, {\n    key: \"quit\",\n    value: function quit() {\n      this._sendCommand('QUIT');\n\n      this._responseActions.push(this.close);\n    }\n    /**\n     * Closes the connection to the server\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      clearTimeout(this._connectionTimeout);\n      clearTimeout(this._greetingTimeout);\n      this._responseActions = []; // allow to run this function only once\n\n      if (this._closing) {\n        return;\n      }\n\n      this._closing = true;\n      var closeMethod = 'end';\n\n      if (this.stage === 'init') {\n        // Close the socket immediately when connection timed out\n        closeMethod = 'destroy';\n      }\n\n      this.logger.debug({\n        tnx: 'smtp'\n      }, 'Closing connection to the server using \"%s\"', closeMethod);\n      var socket = this._socket && this._socket.socket || this._socket;\n\n      if (socket && !socket.destroyed) {\n        try {\n          this._socket[closeMethod]();\n        } catch (E) {// just ignore\n        }\n      }\n\n      this._destroy();\n    }\n    /**\n     * Authenticate user\n     */\n\n  }, {\n    key: \"login\",\n    value: function login(authData, callback) {\n      var _this3 = this;\n\n      var isDestroyedMessage = this._isDestroyedMessage('login');\n\n      if (isDestroyedMessage) {\n        return callback(this._formatError(isDestroyedMessage, 'ECONNECTION', false, 'API'));\n      }\n\n      this._auth = authData || {}; // Select SASL authentication method\n\n      this._authMethod = (this._auth.method || '').toString().trim().toUpperCase() || false;\n\n      if (!this._authMethod && this._auth.oauth2 && !this._auth.credentials) {\n        this._authMethod = 'XOAUTH2';\n      } else if (!this._authMethod || this._authMethod === 'XOAUTH2' && !this._auth.oauth2) {\n        // use first supported\n        this._authMethod = (this._supportedAuth[0] || 'PLAIN').toUpperCase().trim();\n      }\n\n      if (this._authMethod !== 'XOAUTH2' && (!this._auth.credentials || !this._auth.credentials.user || !this._auth.credentials.pass)) {\n        if (this._auth.user && this._auth.pass) {\n          this._auth.credentials = {\n            user: this._auth.user,\n            pass: this._auth.pass,\n            options: this._auth.options\n          };\n        } else {\n          return callback(this._formatError('Missing credentials for \"' + this._authMethod + '\"', 'EAUTH', false, 'API'));\n        }\n      }\n\n      if (this.customAuth.has(this._authMethod)) {\n        var handler = this.customAuth.get(this._authMethod);\n        var lastResponse;\n        var returned = false;\n\n        var resolve = function resolve() {\n          if (returned) {\n            return;\n          }\n\n          returned = true;\n\n          _this3.logger.info({\n            tnx: 'smtp',\n            username: _this3._auth.user,\n            action: 'authenticated',\n            method: _this3._authMethod\n          }, 'User %s authenticated', JSON.stringify(_this3._auth.user));\n\n          _this3.authenticated = true;\n          callback(null, true);\n        };\n\n        var reject = function reject(err) {\n          if (returned) {\n            return;\n          }\n\n          returned = true;\n          callback(_this3._formatError(err, 'EAUTH', lastResponse, 'AUTH ' + _this3._authMethod));\n        };\n\n        var handlerResponse = handler({\n          auth: this._auth,\n          method: this._authMethod,\n          extensions: [].concat(this._supportedExtensions),\n          authMethods: [].concat(this._supportedAuth),\n          maxAllowedSize: this._maxAllowedSize || false,\n          sendCommand: function sendCommand(cmd, done) {\n            var promise;\n\n            if (!done) {\n              promise = new Promise(function (resolve, reject) {\n                done = shared.callbackPromise(resolve, reject);\n              });\n            }\n\n            _this3._responseActions.push(function (str) {\n              lastResponse = str;\n              var codes = str.match(/^(\\d+)(?:\\s(\\d+\\.\\d+\\.\\d+))?\\s/);\n              var data = {\n                command: cmd,\n                response: str\n              };\n\n              if (codes) {\n                data.status = Number(codes[1]) || 0;\n\n                if (codes[2]) {\n                  data.code = codes[2];\n                }\n\n                data.text = str.substr(codes[0].length);\n              } else {\n                data.text = str;\n                data.status = 0; // just in case we need to perform numeric comparisons\n              }\n\n              done(null, data);\n            });\n\n            setImmediate(function () {\n              return _this3._sendCommand(cmd);\n            });\n            return promise;\n          },\n          resolve: resolve,\n          reject: reject\n        });\n\n        if (handlerResponse && typeof handlerResponse.catch === 'function') {\n          // a promise was returned\n          handlerResponse.then(resolve).catch(reject);\n        }\n\n        return;\n      }\n\n      switch (this._authMethod) {\n        case 'XOAUTH2':\n          this._handleXOauth2Token(false, callback);\n\n          return;\n\n        case 'LOGIN':\n          this._responseActions.push(function (str) {\n            _this3._actionAUTH_LOGIN_USER(str, callback);\n          });\n\n          this._sendCommand('AUTH LOGIN');\n\n          return;\n\n        case 'PLAIN':\n          this._responseActions.push(function (str) {\n            _this3._actionAUTHComplete(str, callback);\n          });\n\n          this._sendCommand('AUTH PLAIN ' + Buffer.from( //this._auth.user+'\\u0000'+\n          \"\\0\" + // skip authorization identity as it causes problems with some servers\n          this._auth.credentials.user + \"\\0\" + this._auth.credentials.pass, 'utf-8').toString('base64'), // log entry without passwords\n          'AUTH PLAIN ' + Buffer.from( //this._auth.user+'\\u0000'+\n          \"\\0\" + // skip authorization identity as it causes problems with some servers\n          this._auth.credentials.user + \"\\0\" + '/* secret */', 'utf-8').toString('base64'));\n\n          return;\n\n        case 'CRAM-MD5':\n          this._responseActions.push(function (str) {\n            _this3._actionAUTH_CRAM_MD5(str, callback);\n          });\n\n          this._sendCommand('AUTH CRAM-MD5');\n\n          return;\n      }\n\n      return callback(this._formatError('Unknown authentication method \"' + this._authMethod + '\"', 'EAUTH', false, 'API'));\n    }\n    /**\n     * Sends a message\n     *\n     * @param {Object} envelope Envelope object, {from: addr, to: [addr]}\n     * @param {Object} message String, Buffer or a Stream\n     * @param {Function} callback Callback to return once sending is completed\n     */\n\n  }, {\n    key: \"send\",\n    value: function send(envelope, message, done) {\n      var _this4 = this;\n\n      if (!message) {\n        return done(this._formatError('Empty message', 'EMESSAGE', false, 'API'));\n      }\n\n      var isDestroyedMessage = this._isDestroyedMessage('send message');\n\n      if (isDestroyedMessage) {\n        return done(this._formatError(isDestroyedMessage, 'ECONNECTION', false, 'API'));\n      } // reject larger messages than allowed\n\n\n      if (this._maxAllowedSize && envelope.size > this._maxAllowedSize) {\n        return setImmediate(function () {\n          done(_this4._formatError('Message size larger than allowed ' + _this4._maxAllowedSize, 'EMESSAGE', false, 'MAIL FROM'));\n        });\n      } // ensure that callback is only called once\n\n\n      var returned = false;\n\n      var callback = function callback() {\n        if (returned) {\n          return;\n        }\n\n        returned = true;\n        done.apply(void 0, arguments);\n      };\n\n      if (typeof message.on === 'function') {\n        message.on('error', function (err) {\n          return callback(_this4._formatError(err, 'ESTREAM', false, 'API'));\n        });\n      }\n\n      var startTime = Date.now();\n\n      this._setEnvelope(envelope, function (err, info) {\n        if (err) {\n          return callback(err);\n        }\n\n        var envelopeTime = Date.now();\n\n        var stream = _this4._createSendStream(function (err, str) {\n          if (err) {\n            return callback(err);\n          }\n\n          info.envelopeTime = envelopeTime - startTime;\n          info.messageTime = Date.now() - envelopeTime;\n          info.messageSize = stream.outByteCount;\n          info.response = str;\n          return callback(null, info);\n        });\n\n        if (typeof message.pipe === 'function') {\n          message.pipe(stream);\n        } else {\n          stream.write(message);\n          stream.end();\n        }\n      });\n    }\n    /**\n     * Resets connection state\n     *\n     * @param {Function} callback Callback to return once connection is reset\n     */\n\n  }, {\n    key: \"reset\",\n    value: function reset(callback) {\n      var _this5 = this;\n\n      this._sendCommand('RSET');\n\n      this._responseActions.push(function (str) {\n        if (str.charAt(0) !== '2') {\n          return callback(_this5._formatError('Could not reset session state. response=' + str, 'EPROTOCOL', str, 'RSET'));\n        }\n\n        _this5._envelope = false;\n        return callback(null, true);\n      });\n    }\n    /**\n     * Connection listener that is run when the connection to\n     * the server is opened\n     *\n     * @event\n     */\n\n  }, {\n    key: \"_onConnect\",\n    value: function _onConnect() {\n      var _this6 = this;\n\n      clearTimeout(this._connectionTimeout);\n      this.logger.info({\n        tnx: 'network',\n        localAddress: this._socket.localAddress,\n        localPort: this._socket.localPort,\n        remoteAddress: this._socket.remoteAddress,\n        remotePort: this._socket.remotePort\n      }, '%s established to %s:%s', this.secure ? 'Secure connection' : 'Connection', this._socket.remoteAddress, this._socket.remotePort);\n\n      if (this._destroyed) {\n        // Connection was established after we already had canceled it\n        this.close();\n        return;\n      }\n\n      this.stage = 'connected'; // clear existing listeners for the socket\n\n      this._socket.removeListener('data', this._onSocketData);\n\n      this._socket.removeListener('timeout', this._onSocketTimeout);\n\n      this._socket.removeListener('close', this._onSocketClose);\n\n      this._socket.removeListener('end', this._onSocketEnd);\n\n      this._socket.on('data', this._onSocketData);\n\n      this._socket.once('close', this._onSocketClose);\n\n      this._socket.once('end', this._onSocketEnd);\n\n      this._socket.setTimeout(this.options.socketTimeout || SOCKET_TIMEOUT);\n\n      this._socket.on('timeout', this._onSocketTimeout);\n\n      this._greetingTimeout = setTimeout(function () {\n        // if still waiting for greeting, give up\n        if (_this6._socket && !_this6._destroyed && _this6._responseActions[0] === _this6._actionGreeting) {\n          _this6._onError('Greeting never received', 'ETIMEDOUT', false, 'CONN');\n        }\n      }, this.options.greetingTimeout || GREETING_TIMEOUT);\n\n      this._responseActions.push(this._actionGreeting); // we have a 'data' listener set up so resume socket if it was paused\n\n\n      this._socket.resume();\n    }\n    /**\n     * 'data' listener for data coming from the server\n     *\n     * @event\n     * @param {Buffer} chunk Data chunk coming from the server\n     */\n\n  }, {\n    key: \"_onData\",\n    value: function _onData(chunk) {\n      if (this._destroyed || !chunk || !chunk.length) {\n        return;\n      }\n\n      var data = (chunk || '').toString('binary');\n      var lines = (this._remainder + data).split(/\\r?\\n/);\n      var lastline;\n      this._remainder = lines.pop();\n\n      for (var i = 0, len = lines.length; i < len; i++) {\n        if (this._responseQueue.length) {\n          lastline = this._responseQueue[this._responseQueue.length - 1];\n\n          if (/^\\d+-/.test(lastline.split('\\n').pop())) {\n            this._responseQueue[this._responseQueue.length - 1] += '\\n' + lines[i];\n            continue;\n          }\n        }\n\n        this._responseQueue.push(lines[i]);\n      }\n\n      if (this._responseQueue.length) {\n        lastline = this._responseQueue[this._responseQueue.length - 1];\n\n        if (/^\\d+-/.test(lastline.split('\\n').pop())) {\n          return;\n        }\n      }\n\n      this._processResponse();\n    }\n    /**\n     * 'error' listener for the socket\n     *\n     * @event\n     * @param {Error} err Error object\n     * @param {String} type Error name\n     */\n\n  }, {\n    key: \"_onError\",\n    value: function _onError(err, type, data, command) {\n      clearTimeout(this._connectionTimeout);\n      clearTimeout(this._greetingTimeout);\n\n      if (this._destroyed) {\n        // just ignore, already closed\n        // this might happen when a socket is canceled because of reached timeout\n        // but the socket timeout error itself receives only after\n        return;\n      }\n\n      err = this._formatError(err, type, data, command);\n      this.logger.error(data, err.message);\n      this.emit('error', err);\n      this.close();\n    }\n  }, {\n    key: \"_formatError\",\n    value: function _formatError(message, type, response, command) {\n      var err;\n\n      if (/Error\\]$/i.test(Object.prototype.toString.call(message))) {\n        err = message;\n      } else {\n        err = new Error(message);\n      }\n\n      if (type && type !== 'Error') {\n        err.code = type;\n      }\n\n      if (response) {\n        err.response = response;\n        err.message += ': ' + response;\n      }\n\n      var responseCode = typeof response === 'string' && Number((response.match(/^\\d+/) || [])[0]) || false;\n\n      if (responseCode) {\n        err.responseCode = responseCode;\n      }\n\n      if (command) {\n        err.command = command;\n      }\n\n      return err;\n    }\n    /**\n     * 'close' listener for the socket\n     *\n     * @event\n     */\n\n  }, {\n    key: \"_onClose\",\n    value: function _onClose() {\n      this.logger.info({\n        tnx: 'network'\n      }, 'Connection closed');\n\n      if (this.upgrading && !this._destroyed) {\n        return this._onError(new Error('Connection closed unexpectedly'), 'ETLS', false, 'CONN');\n      } else if (![this._actionGreeting, this.close].includes(this._responseActions[0]) && !this._destroyed) {\n        return this._onError(new Error('Connection closed unexpectedly'), 'ECONNECTION', false, 'CONN');\n      }\n\n      this._destroy();\n    }\n    /**\n     * 'end' listener for the socket\n     *\n     * @event\n     */\n\n  }, {\n    key: \"_onEnd\",\n    value: function _onEnd() {\n      if (this._socket && !this._socket.destroyed) {\n        this._socket.destroy();\n      }\n    }\n    /**\n     * 'timeout' listener for the socket\n     *\n     * @event\n     */\n\n  }, {\n    key: \"_onTimeout\",\n    value: function _onTimeout() {\n      return this._onError(new Error('Timeout'), 'ETIMEDOUT', false, 'CONN');\n    }\n    /**\n     * Destroys the client, emits 'end'\n     */\n\n  }, {\n    key: \"_destroy\",\n    value: function _destroy() {\n      if (this._destroyed) {\n        return;\n      }\n\n      this._destroyed = true;\n      this.emit('end');\n    }\n    /**\n     * Upgrades the connection to TLS\n     *\n     * @param {Function} callback Callback function to run when the connection\n     *        has been secured\n     */\n\n  }, {\n    key: \"_upgradeConnection\",\n    value: function _upgradeConnection(callback) {\n      var _this7 = this;\n\n      // do not remove all listeners or it breaks node v0.10 as there's\n      // apparently a 'finish' event set that would be cleared as well\n      // we can safely keep 'error', 'end', 'close' etc. events\n      this._socket.removeListener('data', this._onSocketData); // incoming data is going to be gibberish from this point onwards\n\n\n      this._socket.removeListener('timeout', this._onSocketTimeout); // timeout will be re-set for the new socket object\n\n\n      var socketPlain = this._socket;\n      var opts = {\n        socket: this._socket,\n        host: this.host\n      };\n      Object.keys(this.options.tls || {}).forEach(function (key) {\n        opts[key] = _this7.options.tls[key];\n      });\n      this.upgrading = true; // tls.connect is not an asynchronous function however it may still throw errors and requires to be wrapped with try/catch\n\n      try {\n        this._socket = tls.connect(opts, function () {\n          _this7.secure = true;\n          _this7.upgrading = false;\n\n          _this7._socket.on('data', _this7._onSocketData);\n\n          socketPlain.removeListener('close', _this7._onSocketClose);\n          socketPlain.removeListener('end', _this7._onSocketEnd);\n          return callback(null, true);\n        });\n      } catch (err) {\n        return callback(err);\n      }\n\n      this._socket.on('error', this._onSocketError);\n\n      this._socket.once('close', this._onSocketClose);\n\n      this._socket.once('end', this._onSocketEnd);\n\n      this._socket.setTimeout(this.options.socketTimeout || SOCKET_TIMEOUT); // 10 min.\n\n\n      this._socket.on('timeout', this._onSocketTimeout); // resume in case the socket was paused\n\n\n      socketPlain.resume();\n    }\n    /**\n     * Processes queued responses from the server\n     *\n     * @param {Boolean} force If true, ignores _processing flag\n     */\n\n  }, {\n    key: \"_processResponse\",\n    value: function _processResponse() {\n      var _this8 = this;\n\n      if (!this._responseQueue.length) {\n        return false;\n      }\n\n      var str = this.lastServerResponse = (this._responseQueue.shift() || '').toString();\n\n      if (/^\\d+-/.test(str.split('\\n').pop())) {\n        // keep waiting for the final part of multiline response\n        return;\n      }\n\n      if (this.options.debug || this.options.transactionLog) {\n        this.logger.debug({\n          tnx: 'server'\n        }, str.replace(/\\r?\\n$/, ''));\n      }\n\n      if (!str.trim()) {\n        // skip unexpected empty lines\n        setImmediate(function () {\n          return _this8._processResponse(true);\n        });\n      }\n\n      var action = this._responseActions.shift();\n\n      if (typeof action === 'function') {\n        action.call(this, str);\n        setImmediate(function () {\n          return _this8._processResponse(true);\n        });\n      } else {\n        return this._onError(new Error('Unexpected Response'), 'EPROTOCOL', str, 'CONN');\n      }\n    }\n    /**\n     * Send a command to the server, append \\r\\n\n     *\n     * @param {String} str String to be sent to the server\n     * @param {String} logStr Optional string to be used for logging instead of the actual string\n     */\n\n  }, {\n    key: \"_sendCommand\",\n    value: function _sendCommand(str, logStr) {\n      if (this._destroyed) {\n        // Connection already closed, can't send any more data\n        return;\n      }\n\n      if (this._socket.destroyed) {\n        return this.close();\n      }\n\n      if (this.options.debug || this.options.transactionLog) {\n        this.logger.debug({\n          tnx: 'client'\n        }, (logStr || str || '').toString().replace(/\\r?\\n$/, ''));\n      }\n\n      this._socket.write(Buffer.from(str + '\\r\\n', 'utf-8'));\n    }\n    /**\n     * Initiates a new message by submitting envelope data, starting with\n     * MAIL FROM: command\n     *\n     * @param {Object} envelope Envelope object in the form of\n     *        {from:'...', to:['...']}\n     *        or\n     *        {from:{address:'...',name:'...'}, to:[address:'...',name:'...']}\n     */\n\n  }, {\n    key: \"_setEnvelope\",\n    value: function _setEnvelope(envelope, callback) {\n      var _this9 = this;\n\n      var args = [];\n      var useSmtpUtf8 = false;\n      this._envelope = envelope || {};\n      this._envelope.from = (this._envelope.from && this._envelope.from.address || this._envelope.from || '').toString().trim();\n      this._envelope.to = [].concat(this._envelope.to || []).map(function (to) {\n        return (to && to.address || to || '').toString().trim();\n      });\n\n      if (!this._envelope.to.length) {\n        return callback(this._formatError('No recipients defined', 'EENVELOPE', false, 'API'));\n      }\n\n      if (this._envelope.from && /[\\r\\n<>]/.test(this._envelope.from)) {\n        return callback(this._formatError('Invalid sender ' + JSON.stringify(this._envelope.from), 'EENVELOPE', false, 'API'));\n      } // check if the sender address uses only ASCII characters,\n      // otherwise require usage of SMTPUTF8 extension\n\n\n      if (/[\\x80-\\uFFFF]/.test(this._envelope.from)) {\n        useSmtpUtf8 = true;\n      }\n\n      for (var i = 0, len = this._envelope.to.length; i < len; i++) {\n        if (!this._envelope.to[i] || /[\\r\\n<>]/.test(this._envelope.to[i])) {\n          return callback(this._formatError('Invalid recipient ' + JSON.stringify(this._envelope.to[i]), 'EENVELOPE', false, 'API'));\n        } // check if the recipients addresses use only ASCII characters,\n        // otherwise require usage of SMTPUTF8 extension\n\n\n        if (/[\\x80-\\uFFFF]/.test(this._envelope.to[i])) {\n          useSmtpUtf8 = true;\n        }\n      } // clone the recipients array for latter manipulation\n\n\n      this._envelope.rcptQueue = JSON.parse(JSON.stringify(this._envelope.to || []));\n      this._envelope.rejected = [];\n      this._envelope.rejectedErrors = [];\n      this._envelope.accepted = [];\n\n      if (this._envelope.dsn) {\n        try {\n          this._envelope.dsn = this._setDsnEnvelope(this._envelope.dsn);\n        } catch (err) {\n          return callback(this._formatError('Invalid DSN ' + err.message, 'EENVELOPE', false, 'API'));\n        }\n      }\n\n      this._responseActions.push(function (str) {\n        _this9._actionMAIL(str, callback);\n      }); // If the server supports SMTPUTF8 and the envelope includes an internationalized\n      // email address then append SMTPUTF8 keyword to the MAIL FROM command\n\n\n      if (useSmtpUtf8 && this._supportedExtensions.includes('SMTPUTF8')) {\n        args.push('SMTPUTF8');\n        this._usingSmtpUtf8 = true;\n      } // If the server supports 8BITMIME and the message might contain non-ascii bytes\n      // then append the 8BITMIME keyword to the MAIL FROM command\n\n\n      if (this._envelope.use8BitMime && this._supportedExtensions.includes('8BITMIME')) {\n        args.push('BODY=8BITMIME');\n        this._using8BitMime = true;\n      }\n\n      if (this._envelope.size && this._supportedExtensions.includes('SIZE')) {\n        args.push('SIZE=' + this._envelope.size);\n      } // If the server supports DSN and the envelope includes an DSN prop\n      // then append DSN params to the MAIL FROM command\n\n\n      if (this._envelope.dsn && this._supportedExtensions.includes('DSN')) {\n        if (this._envelope.dsn.ret) {\n          args.push('RET=' + shared.encodeXText(this._envelope.dsn.ret));\n        }\n\n        if (this._envelope.dsn.envid) {\n          args.push('ENVID=' + shared.encodeXText(this._envelope.dsn.envid));\n        }\n      }\n\n      this._sendCommand('MAIL FROM:<' + this._envelope.from + '>' + (args.length ? ' ' + args.join(' ') : ''));\n    }\n  }, {\n    key: \"_setDsnEnvelope\",\n    value: function _setDsnEnvelope(params) {\n      var ret = (params.ret || params.return || '').toString().toUpperCase() || null;\n\n      if (ret) {\n        switch (ret) {\n          case 'HDRS':\n          case 'HEADERS':\n            ret = 'HDRS';\n            break;\n\n          case 'FULL':\n          case 'BODY':\n            ret = 'FULL';\n            break;\n        }\n      }\n\n      if (ret && !['FULL', 'HDRS'].includes(ret)) {\n        throw new Error('ret: ' + JSON.stringify(ret));\n      }\n\n      var envid = (params.envid || params.id || '').toString() || null;\n      var notify = params.notify || null;\n\n      if (notify) {\n        if (typeof notify === 'string') {\n          notify = notify.split(',');\n        }\n\n        notify = notify.map(function (n) {\n          return n.trim().toUpperCase();\n        });\n        var validNotify = ['NEVER', 'SUCCESS', 'FAILURE', 'DELAY'];\n        var invaliNotify = notify.filter(function (n) {\n          return !validNotify.includes(n);\n        });\n\n        if (invaliNotify.length || notify.length > 1 && notify.includes('NEVER')) {\n          throw new Error('notify: ' + JSON.stringify(notify.join(',')));\n        }\n\n        notify = notify.join(',');\n      }\n\n      var orcpt = (params.recipient || params.orcpt || '').toString() || null;\n\n      if (orcpt && orcpt.indexOf(';') < 0) {\n        orcpt = 'rfc822;' + orcpt;\n      }\n\n      return {\n        ret: ret,\n        envid: envid,\n        notify: notify,\n        orcpt: orcpt\n      };\n    }\n  }, {\n    key: \"_getDsnRcptToArgs\",\n    value: function _getDsnRcptToArgs() {\n      var args = []; // If the server supports DSN and the envelope includes an DSN prop\n      // then append DSN params to the RCPT TO command\n\n      if (this._envelope.dsn && this._supportedExtensions.includes('DSN')) {\n        if (this._envelope.dsn.notify) {\n          args.push('NOTIFY=' + shared.encodeXText(this._envelope.dsn.notify));\n        }\n\n        if (this._envelope.dsn.orcpt) {\n          args.push('ORCPT=' + shared.encodeXText(this._envelope.dsn.orcpt));\n        }\n      }\n\n      return args.length ? ' ' + args.join(' ') : '';\n    }\n  }, {\n    key: \"_createSendStream\",\n    value: function _createSendStream(callback) {\n      var _this10 = this;\n\n      var dataStream = new DataStream();\n      var logStream;\n\n      if (this.options.lmtp) {\n        this._envelope.accepted.forEach(function (recipient, i) {\n          var final = i === _this10._envelope.accepted.length - 1;\n\n          _this10._responseActions.push(function (str) {\n            _this10._actionLMTPStream(recipient, final, str, callback);\n          });\n        });\n      } else {\n        this._responseActions.push(function (str) {\n          _this10._actionSMTPStream(str, callback);\n        });\n      }\n\n      dataStream.pipe(this._socket, {\n        end: false\n      });\n\n      if (this.options.debug) {\n        logStream = new PassThrough();\n        logStream.on('readable', function () {\n          var chunk;\n\n          while (chunk = logStream.read()) {\n            _this10.logger.debug({\n              tnx: 'message'\n            }, chunk.toString('binary').replace(/\\r?\\n$/, ''));\n          }\n        });\n        dataStream.pipe(logStream);\n      }\n\n      dataStream.once('end', function () {\n        _this10.logger.info({\n          tnx: 'message',\n          inByteCount: dataStream.inByteCount,\n          outByteCount: dataStream.outByteCount\n        }, '<%s bytes encoded mime message (source size %s bytes)>', dataStream.outByteCount, dataStream.inByteCount);\n      });\n      return dataStream;\n    }\n    /** ACTIONS **/\n\n    /**\n     * Will be run after the connection is created and the server sends\n     * a greeting. If the incoming message starts with 220 initiate\n     * SMTP session by sending EHLO command\n     *\n     * @param {String} str Message from the server\n     */\n\n  }, {\n    key: \"_actionGreeting\",\n    value: function _actionGreeting(str) {\n      clearTimeout(this._greetingTimeout);\n\n      if (str.substr(0, 3) !== '220') {\n        this._onError(new Error('Invalid greeting. response=' + str), 'EPROTOCOL', str, 'CONN');\n\n        return;\n      }\n\n      if (this.options.lmtp) {\n        this._responseActions.push(this._actionLHLO);\n\n        this._sendCommand('LHLO ' + this.name);\n      } else {\n        this._responseActions.push(this._actionEHLO);\n\n        this._sendCommand('EHLO ' + this.name);\n      }\n    }\n    /**\n     * Handles server response for LHLO command. If it yielded in\n     * error, emit 'error', otherwise treat this as an EHLO response\n     *\n     * @param {String} str Message from the server\n     */\n\n  }, {\n    key: \"_actionLHLO\",\n    value: function _actionLHLO(str) {\n      if (str.charAt(0) !== '2') {\n        this._onError(new Error('Invalid LHLO. response=' + str), 'EPROTOCOL', str, 'LHLO');\n\n        return;\n      }\n\n      this._actionEHLO(str);\n    }\n    /**\n     * Handles server response for EHLO command. If it yielded in\n     * error, try HELO instead, otherwise initiate TLS negotiation\n     * if STARTTLS is supported by the server or move into the\n     * authentication phase.\n     *\n     * @param {String} str Message from the server\n     */\n\n  }, {\n    key: \"_actionEHLO\",\n    value: function _actionEHLO(str) {\n      var match;\n\n      if (str.substr(0, 3) === '421') {\n        this._onError(new Error('Server terminates connection. response=' + str), 'ECONNECTION', str, 'EHLO');\n\n        return;\n      }\n\n      if (str.charAt(0) !== '2') {\n        if (this.options.requireTLS) {\n          this._onError(new Error('EHLO failed but HELO does not support required STARTTLS. response=' + str), 'ECONNECTION', str, 'EHLO');\n\n          return;\n        } // Try HELO instead\n\n\n        this._responseActions.push(this._actionHELO);\n\n        this._sendCommand('HELO ' + this.name);\n\n        return;\n      } // Detect if the server supports STARTTLS\n\n\n      if (!this.secure && !this.options.ignoreTLS && (/[ -]STARTTLS\\b/im.test(str) || this.options.requireTLS)) {\n        this._sendCommand('STARTTLS');\n\n        this._responseActions.push(this._actionSTARTTLS);\n\n        return;\n      } // Detect if the server supports SMTPUTF8\n\n\n      if (/[ -]SMTPUTF8\\b/im.test(str)) {\n        this._supportedExtensions.push('SMTPUTF8');\n      } // Detect if the server supports DSN\n\n\n      if (/[ -]DSN\\b/im.test(str)) {\n        this._supportedExtensions.push('DSN');\n      } // Detect if the server supports 8BITMIME\n\n\n      if (/[ -]8BITMIME\\b/im.test(str)) {\n        this._supportedExtensions.push('8BITMIME');\n      } // Detect if the server supports PIPELINING\n\n\n      if (/[ -]PIPELINING\\b/im.test(str)) {\n        this._supportedExtensions.push('PIPELINING');\n      } // Detect if the server supports AUTH\n\n\n      if (/[ -]AUTH\\b/i.test(str)) {\n        this.allowsAuth = true;\n      } // Detect if the server supports PLAIN auth\n\n\n      if (/[ -]AUTH(?:(\\s+|=)[^\\n]*\\s+|\\s+|=)PLAIN/i.test(str)) {\n        this._supportedAuth.push('PLAIN');\n      } // Detect if the server supports LOGIN auth\n\n\n      if (/[ -]AUTH(?:(\\s+|=)[^\\n]*\\s+|\\s+|=)LOGIN/i.test(str)) {\n        this._supportedAuth.push('LOGIN');\n      } // Detect if the server supports CRAM-MD5 auth\n\n\n      if (/[ -]AUTH(?:(\\s+|=)[^\\n]*\\s+|\\s+|=)CRAM-MD5/i.test(str)) {\n        this._supportedAuth.push('CRAM-MD5');\n      } // Detect if the server supports XOAUTH2 auth\n\n\n      if (/[ -]AUTH(?:(\\s+|=)[^\\n]*\\s+|\\s+|=)XOAUTH2/i.test(str)) {\n        this._supportedAuth.push('XOAUTH2');\n      } // Detect if the server supports SIZE extensions (and the max allowed size)\n\n\n      if (match = str.match(/[ -]SIZE(?:[ \\t]+(\\d+))?/im)) {\n        this._supportedExtensions.push('SIZE');\n\n        this._maxAllowedSize = Number(match[1]) || 0;\n      }\n\n      this.emit('connect');\n    }\n    /**\n     * Handles server response for HELO command. If it yielded in\n     * error, emit 'error', otherwise move into the authentication phase.\n     *\n     * @param {String} str Message from the server\n     */\n\n  }, {\n    key: \"_actionHELO\",\n    value: function _actionHELO(str) {\n      if (str.charAt(0) !== '2') {\n        this._onError(new Error('Invalid HELO. response=' + str), 'EPROTOCOL', str, 'HELO');\n\n        return;\n      } // assume that authentication is enabled (most probably is not though)\n\n\n      this.allowsAuth = true;\n      this.emit('connect');\n    }\n    /**\n     * Handles server response for STARTTLS command. If there's an error\n     * try HELO instead, otherwise initiate TLS upgrade. If the upgrade\n     * succeedes restart the EHLO\n     *\n     * @param {String} str Message from the server\n     */\n\n  }, {\n    key: \"_actionSTARTTLS\",\n    value: function _actionSTARTTLS(str) {\n      var _this11 = this;\n\n      if (str.charAt(0) !== '2') {\n        if (this.options.opportunisticTLS) {\n          this.logger.info({\n            tnx: 'smtp'\n          }, 'Failed STARTTLS upgrade, continuing unencrypted');\n          return this.emit('connect');\n        }\n\n        this._onError(new Error('Error upgrading connection with STARTTLS'), 'ETLS', str, 'STARTTLS');\n\n        return;\n      }\n\n      this._upgradeConnection(function (err, secured) {\n        if (err) {\n          _this11._onError(new Error('Error initiating TLS - ' + (err.message || err)), 'ETLS', false, 'STARTTLS');\n\n          return;\n        }\n\n        _this11.logger.info({\n          tnx: 'smtp'\n        }, 'Connection upgraded with STARTTLS');\n\n        if (secured) {\n          // restart session\n          if (_this11.options.lmtp) {\n            _this11._responseActions.push(_this11._actionLHLO);\n\n            _this11._sendCommand('LHLO ' + _this11.name);\n          } else {\n            _this11._responseActions.push(_this11._actionEHLO);\n\n            _this11._sendCommand('EHLO ' + _this11.name);\n          }\n        } else {\n          _this11.emit('connect');\n        }\n      });\n    }\n    /**\n     * Handle the response for AUTH LOGIN command. We are expecting\n     * '334 VXNlcm5hbWU6' (base64 for 'Username:'). Data to be sent as\n     * response needs to be base64 encoded username. We do not need\n     * exact match but settle with 334 response in general as some\n     * hosts invalidly use a longer message than VXNlcm5hbWU6\n     *\n     * @param {String} str Message from the server\n     */\n\n  }, {\n    key: \"_actionAUTH_LOGIN_USER\",\n    value: function _actionAUTH_LOGIN_USER(str, callback) {\n      var _this12 = this;\n\n      if (!/^334[ -]/.test(str)) {\n        // expecting '334 VXNlcm5hbWU6'\n        callback(this._formatError('Invalid login sequence while waiting for \"334 VXNlcm5hbWU6\"', 'EAUTH', str, 'AUTH LOGIN'));\n        return;\n      }\n\n      this._responseActions.push(function (str) {\n        _this12._actionAUTH_LOGIN_PASS(str, callback);\n      });\n\n      this._sendCommand(Buffer.from(this._auth.credentials.user + '', 'utf-8').toString('base64'));\n    }\n    /**\n     * Handle the response for AUTH CRAM-MD5 command. We are expecting\n     * '334 <challenge string>'. Data to be sent as response needs to be\n     * base64 decoded challenge string, MD5 hashed using the password as\n     * a HMAC key, prefixed by the username and a space, and finally all\n     * base64 encoded again.\n     *\n     * @param {String} str Message from the server\n     */\n\n  }, {\n    key: \"_actionAUTH_CRAM_MD5\",\n    value: function _actionAUTH_CRAM_MD5(str, callback) {\n      var _this13 = this;\n\n      var challengeMatch = str.match(/^334\\s+(.+)$/);\n      var challengeString = '';\n\n      if (!challengeMatch) {\n        return callback(this._formatError('Invalid login sequence while waiting for server challenge string', 'EAUTH', str, 'AUTH CRAM-MD5'));\n      } else {\n        challengeString = challengeMatch[1];\n      } // Decode from base64\n\n\n      var base64decoded = Buffer.from(challengeString, 'base64').toString('ascii'),\n          hmacMD5 = crypto.createHmac('md5', this._auth.credentials.pass);\n      hmacMD5.update(base64decoded);\n      var prepended = this._auth.credentials.user + ' ' + hmacMD5.digest('hex');\n\n      this._responseActions.push(function (str) {\n        _this13._actionAUTH_CRAM_MD5_PASS(str, callback);\n      });\n\n      this._sendCommand(Buffer.from(prepended).toString('base64'), // hidden hash for logs\n      Buffer.from(this._auth.credentials.user + ' /* secret */').toString('base64'));\n    }\n    /**\n     * Handles the response to CRAM-MD5 authentication, if there's no error,\n     * the user can be considered logged in. Start waiting for a message to send\n     *\n     * @param {String} str Message from the server\n     */\n\n  }, {\n    key: \"_actionAUTH_CRAM_MD5_PASS\",\n    value: function _actionAUTH_CRAM_MD5_PASS(str, callback) {\n      if (!str.match(/^235\\s+/)) {\n        return callback(this._formatError('Invalid login sequence while waiting for \"235\"', 'EAUTH', str, 'AUTH CRAM-MD5'));\n      }\n\n      this.logger.info({\n        tnx: 'smtp',\n        username: this._auth.user,\n        action: 'authenticated',\n        method: this._authMethod\n      }, 'User %s authenticated', JSON.stringify(this._auth.user));\n      this.authenticated = true;\n      callback(null, true);\n    }\n    /**\n     * Handle the response for AUTH LOGIN command. We are expecting\n     * '334 UGFzc3dvcmQ6' (base64 for 'Password:'). Data to be sent as\n     * response needs to be base64 encoded password.\n     *\n     * @param {String} str Message from the server\n     */\n\n  }, {\n    key: \"_actionAUTH_LOGIN_PASS\",\n    value: function _actionAUTH_LOGIN_PASS(str, callback) {\n      var _this14 = this;\n\n      if (!/^334[ -]/.test(str)) {\n        // expecting '334 UGFzc3dvcmQ6'\n        return callback(this._formatError('Invalid login sequence while waiting for \"334 UGFzc3dvcmQ6\"', 'EAUTH', str, 'AUTH LOGIN'));\n      }\n\n      this._responseActions.push(function (str) {\n        _this14._actionAUTHComplete(str, callback);\n      });\n\n      this._sendCommand(Buffer.from((this._auth.credentials.pass || '').toString(), 'utf-8').toString('base64'), // Hidden pass for logs\n      Buffer.from('/* secret */', 'utf-8').toString('base64'));\n    }\n    /**\n     * Handles the response for authentication, if there's no error,\n     * the user can be considered logged in. Start waiting for a message to send\n     *\n     * @param {String} str Message from the server\n     */\n\n  }, {\n    key: \"_actionAUTHComplete\",\n    value: function _actionAUTHComplete(str, isRetry, callback) {\n      var _this15 = this;\n\n      if (!callback && typeof isRetry === 'function') {\n        callback = isRetry;\n        isRetry = false;\n      }\n\n      if (str.substr(0, 3) === '334') {\n        this._responseActions.push(function (str) {\n          if (isRetry || _this15._authMethod !== 'XOAUTH2') {\n            _this15._actionAUTHComplete(str, true, callback);\n          } else {\n            // fetch a new OAuth2 access token\n            setImmediate(function () {\n              return _this15._handleXOauth2Token(true, callback);\n            });\n          }\n        });\n\n        this._sendCommand('');\n\n        return;\n      }\n\n      if (str.charAt(0) !== '2') {\n        this.logger.info({\n          tnx: 'smtp',\n          username: this._auth.user,\n          action: 'authfail',\n          method: this._authMethod\n        }, 'User %s failed to authenticate', JSON.stringify(this._auth.user));\n        return callback(this._formatError('Invalid login', 'EAUTH', str, 'AUTH ' + this._authMethod));\n      }\n\n      this.logger.info({\n        tnx: 'smtp',\n        username: this._auth.user,\n        action: 'authenticated',\n        method: this._authMethod\n      }, 'User %s authenticated', JSON.stringify(this._auth.user));\n      this.authenticated = true;\n      callback(null, true);\n    }\n    /**\n     * Handle response for a MAIL FROM: command\n     *\n     * @param {String} str Message from the server\n     */\n\n  }, {\n    key: \"_actionMAIL\",\n    value: function _actionMAIL(str, callback) {\n      var _this16 = this;\n\n      var message, curRecipient;\n\n      if (Number(str.charAt(0)) !== 2) {\n        if (this._usingSmtpUtf8 && /^550 /.test(str) && /[\\x80-\\uFFFF]/.test(this._envelope.from)) {\n          message = 'Internationalized mailbox name not allowed';\n        } else {\n          message = 'Mail command failed';\n        }\n\n        return callback(this._formatError(message, 'EENVELOPE', str, 'MAIL FROM'));\n      }\n\n      if (!this._envelope.rcptQueue.length) {\n        return callback(this._formatError('Can\\x27t send mail - no recipients defined', 'EENVELOPE', false, 'API'));\n      } else {\n        this._recipientQueue = [];\n\n        if (this._supportedExtensions.includes('PIPELINING')) {\n          while (this._envelope.rcptQueue.length) {\n            curRecipient = this._envelope.rcptQueue.shift();\n\n            this._recipientQueue.push(curRecipient);\n\n            this._responseActions.push(function (str) {\n              _this16._actionRCPT(str, callback);\n            });\n\n            this._sendCommand('RCPT TO:<' + curRecipient + '>' + this._getDsnRcptToArgs());\n          }\n        } else {\n          curRecipient = this._envelope.rcptQueue.shift();\n\n          this._recipientQueue.push(curRecipient);\n\n          this._responseActions.push(function (str) {\n            _this16._actionRCPT(str, callback);\n          });\n\n          this._sendCommand('RCPT TO:<' + curRecipient + '>' + this._getDsnRcptToArgs());\n        }\n      }\n    }\n    /**\n     * Handle response for a RCPT TO: command\n     *\n     * @param {String} str Message from the server\n     */\n\n  }, {\n    key: \"_actionRCPT\",\n    value: function _actionRCPT(str, callback) {\n      var _this17 = this;\n\n      var message,\n          err,\n          curRecipient = this._recipientQueue.shift();\n\n      if (Number(str.charAt(0)) !== 2) {\n        // this is a soft error\n        if (this._usingSmtpUtf8 && /^553 /.test(str) && /[\\x80-\\uFFFF]/.test(curRecipient)) {\n          message = 'Internationalized mailbox name not allowed';\n        } else {\n          message = 'Recipient command failed';\n        }\n\n        this._envelope.rejected.push(curRecipient); // store error for the failed recipient\n\n\n        err = this._formatError(message, 'EENVELOPE', str, 'RCPT TO');\n        err.recipient = curRecipient;\n\n        this._envelope.rejectedErrors.push(err);\n      } else {\n        this._envelope.accepted.push(curRecipient);\n      }\n\n      if (!this._envelope.rcptQueue.length && !this._recipientQueue.length) {\n        if (this._envelope.rejected.length < this._envelope.to.length) {\n          this._responseActions.push(function (str) {\n            _this17._actionDATA(str, callback);\n          });\n\n          this._sendCommand('DATA');\n        } else {\n          err = this._formatError('Can\\x27t send mail - all recipients were rejected', 'EENVELOPE', str, 'RCPT TO');\n          err.rejected = this._envelope.rejected;\n          err.rejectedErrors = this._envelope.rejectedErrors;\n          return callback(err);\n        }\n      } else if (this._envelope.rcptQueue.length) {\n        curRecipient = this._envelope.rcptQueue.shift();\n\n        this._recipientQueue.push(curRecipient);\n\n        this._responseActions.push(function (str) {\n          _this17._actionRCPT(str, callback);\n        });\n\n        this._sendCommand('RCPT TO:<' + curRecipient + '>' + this._getDsnRcptToArgs());\n      }\n    }\n    /**\n     * Handle response for a DATA command\n     *\n     * @param {String} str Message from the server\n     */\n\n  }, {\n    key: \"_actionDATA\",\n    value: function _actionDATA(str, callback) {\n      // response should be 354 but according to this issue https://github.com/eleith/emailjs/issues/24\n      // some servers might use 250 instead, so lets check for 2 or 3 as the first digit\n      if (!/^[23]/.test(str)) {\n        return callback(this._formatError('Data command failed', 'EENVELOPE', str, 'DATA'));\n      }\n\n      var response = {\n        accepted: this._envelope.accepted,\n        rejected: this._envelope.rejected\n      };\n\n      if (this._envelope.rejectedErrors.length) {\n        response.rejectedErrors = this._envelope.rejectedErrors;\n      }\n\n      callback(null, response);\n    }\n    /**\n     * Handle response for a DATA stream when using SMTP\n     * We expect a single response that defines if the sending succeeded or failed\n     *\n     * @param {String} str Message from the server\n     */\n\n  }, {\n    key: \"_actionSMTPStream\",\n    value: function _actionSMTPStream(str, callback) {\n      if (Number(str.charAt(0)) !== 2) {\n        // Message failed\n        return callback(this._formatError('Message failed', 'EMESSAGE', str, 'DATA'));\n      } else {\n        // Message sent succesfully\n        return callback(null, str);\n      }\n    }\n    /**\n     * Handle response for a DATA stream\n     * We expect a separate response for every recipient. All recipients can either\n     * succeed or fail separately\n     *\n     * @param {String} recipient The recipient this response applies to\n     * @param {Boolean} final Is this the final recipient?\n     * @param {String} str Message from the server\n     */\n\n  }, {\n    key: \"_actionLMTPStream\",\n    value: function _actionLMTPStream(recipient, final, str, callback) {\n      var err;\n\n      if (Number(str.charAt(0)) !== 2) {\n        // Message failed\n        err = this._formatError('Message failed for recipient ' + recipient, 'EMESSAGE', str, 'DATA');\n        err.recipient = recipient;\n\n        this._envelope.rejected.push(recipient);\n\n        this._envelope.rejectedErrors.push(err);\n\n        for (var i = 0, len = this._envelope.accepted.length; i < len; i++) {\n          if (this._envelope.accepted[i] === recipient) {\n            this._envelope.accepted.splice(i, 1);\n          }\n        }\n      }\n\n      if (final) {\n        return callback(null, str);\n      }\n    }\n  }, {\n    key: \"_handleXOauth2Token\",\n    value: function _handleXOauth2Token(isRetry, callback) {\n      var _this18 = this;\n\n      this._auth.oauth2.getToken(isRetry, function (err, accessToken) {\n        if (err) {\n          _this18.logger.info({\n            tnx: 'smtp',\n            username: _this18._auth.user,\n            action: 'authfail',\n            method: _this18._authMethod\n          }, 'User %s failed to authenticate', JSON.stringify(_this18._auth.user));\n\n          return callback(_this18._formatError(err, 'EAUTH', false, 'AUTH XOAUTH2'));\n        }\n\n        _this18._responseActions.push(function (str) {\n          _this18._actionAUTHComplete(str, isRetry, callback);\n        });\n\n        _this18._sendCommand('AUTH XOAUTH2 ' + _this18._auth.oauth2.buildXOAuth2Token(accessToken), //  Hidden for logs\n        'AUTH XOAUTH2 ' + _this18._auth.oauth2.buildXOAuth2Token('/* secret */'));\n      });\n    }\n    /**\n     *\n     * @param {string} command\n     * @private\n     */\n\n  }, {\n    key: \"_isDestroyedMessage\",\n    value: function _isDestroyedMessage(command) {\n      if (this._destroyed) {\n        return 'Cannot ' + command + ' - smtp connection is already destroyed.';\n      }\n\n      if (this._socket) {\n        if (this._socket.destroyed) {\n          return 'Cannot ' + command + ' - smtp connection socket is already destroyed.';\n        }\n\n        if (!this._socket.writable) {\n          return 'Cannot ' + command + ' - smtp connection socket is already half-closed.';\n        }\n      }\n    }\n  }, {\n    key: \"_getHostname\",\n    value: function _getHostname() {\n      // defaul hostname is machine hostname or [IP]\n      var defaultHostname;\n\n      try {\n        defaultHostname = os.hostname() || '';\n      } catch (err) {\n        // fails on windows 7\n        defaultHostname = 'localhost';\n      } // ignore if not FQDN\n\n\n      if (!defaultHostname || defaultHostname.indexOf('.') < 0) {\n        defaultHostname = '[127.0.0.1]';\n      } // IP should be enclosed in []\n\n\n      if (defaultHostname.match(/^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/)) {\n        defaultHostname = '[' + defaultHostname + ']';\n      }\n\n      return defaultHostname;\n    }\n  }]);\n\n  return SMTPConnection;\n}(EventEmitter);\n\nmodule.exports = SMTPConnection;","map":{"version":3,"names":["packageInfo","require","EventEmitter","net","tls","os","crypto","DataStream","PassThrough","shared","CONNECTION_TIMEOUT","SOCKET_TIMEOUT","GREETING_TIMEOUT","SMTPConnection","options","id","randomBytes","toString","replace","stage","secureConnection","secure","alreadySecured","secured","port","Number","host","allowInternalNetworkInterfaces","name","_getHostname","logger","getLogger","component","sid","customAuth","Map","Object","keys","forEach","key","mapKey","trim","toUpperCase","set","version","authenticated","destroyed","_remainder","_responseQueue","lastServerResponse","_socket","_supportedAuth","allowsAuth","_envelope","_supportedExtensions","_maxAllowedSize","_responseActions","_recipientQueue","_greetingTimeout","_connectionTimeout","_destroyed","_closing","_onSocketData","chunk","_onData","_onSocketError","error","_onError","_onSocketClose","_onClose","_onSocketEnd","_onEnd","_onSocketTimeout","_onTimeout","connectCallback","once","debug","tnx","isDestroyedMessage","_isDestroyedMessage","_formatError","opts","localAddress","setupConnectionHandlers","setTimeout","connectionTimeout","on","connection","setImmediate","_upgradeConnection","err","Error","message","_onConnect","socket","resolveHostname","resolved","source","cached","charAt","connect","setKeepAlive","E","_sendCommand","push","close","clearTimeout","closeMethod","_destroy","authData","callback","_auth","_authMethod","method","oauth2","credentials","user","pass","has","handler","get","lastResponse","returned","resolve","info","username","action","JSON","stringify","reject","handlerResponse","auth","extensions","concat","authMethods","maxAllowedSize","sendCommand","cmd","done","promise","Promise","callbackPromise","str","codes","match","data","command","response","status","code","text","substr","length","catch","then","_handleXOauth2Token","_actionAUTH_LOGIN_USER","_actionAUTHComplete","Buffer","from","_actionAUTH_CRAM_MD5","envelope","size","arguments","startTime","Date","now","_setEnvelope","envelopeTime","stream","_createSendStream","messageTime","messageSize","outByteCount","pipe","write","end","localPort","remoteAddress","remotePort","removeListener","socketTimeout","_actionGreeting","greetingTimeout","resume","lines","split","lastline","pop","i","len","test","_processResponse","type","emit","prototype","call","responseCode","upgrading","includes","destroy","socketPlain","shift","transactionLog","logStr","args","useSmtpUtf8","address","to","map","rcptQueue","parse","rejected","rejectedErrors","accepted","dsn","_setDsnEnvelope","_actionMAIL","_usingSmtpUtf8","use8BitMime","_using8BitMime","ret","encodeXText","envid","join","params","return","notify","n","validNotify","invaliNotify","filter","orcpt","recipient","indexOf","dataStream","logStream","lmtp","final","_actionLMTPStream","_actionSMTPStream","read","inByteCount","_actionLHLO","_actionEHLO","requireTLS","_actionHELO","ignoreTLS","_actionSTARTTLS","opportunisticTLS","_actionAUTH_LOGIN_PASS","challengeMatch","challengeString","base64decoded","hmacMD5","createHmac","update","prepended","digest","_actionAUTH_CRAM_MD5_PASS","isRetry","curRecipient","_actionRCPT","_getDsnRcptToArgs","_actionDATA","splice","getToken","accessToken","buildXOAuth2Token","writable","defaultHostname","hostname","module","exports"],"sources":["/Users/heritier/repos/github/hmbs-server/node_modules/nodemailer/lib/smtp-connection/index.js"],"sourcesContent":["'use strict';\n\nconst packageInfo = require('../../package.json');\nconst EventEmitter = require('events').EventEmitter;\nconst net = require('net');\nconst tls = require('tls');\nconst os = require('os');\nconst crypto = require('crypto');\nconst DataStream = require('./data-stream');\nconst PassThrough = require('stream').PassThrough;\nconst shared = require('../shared');\n\n// default timeout values in ms\nconst CONNECTION_TIMEOUT = 2 * 60 * 1000; // how much to wait for the connection to be established\nconst SOCKET_TIMEOUT = 10 * 60 * 1000; // how much to wait for socket inactivity before disconnecting the client\nconst GREETING_TIMEOUT = 30 * 1000; // how much to wait after connection is established but SMTP greeting is not receieved\n\n/**\n * Generates a SMTP connection object\n *\n * Optional options object takes the following possible properties:\n *\n *  * **port** - is the port to connect to (defaults to 587 or 465)\n *  * **host** - is the hostname or IP address to connect to (defaults to 'localhost')\n *  * **secure** - use SSL\n *  * **ignoreTLS** - ignore server support for STARTTLS\n *  * **requireTLS** - forces the client to use STARTTLS\n *  * **name** - the name of the client server\n *  * **localAddress** - outbound address to bind to (see: http://nodejs.org/api/net.html#net_net_connect_options_connectionlistener)\n *  * **greetingTimeout** - Time to wait in ms until greeting message is received from the server (defaults to 10000)\n *  * **connectionTimeout** - how many milliseconds to wait for the connection to establish\n *  * **socketTimeout** - Time of inactivity until the connection is closed (defaults to 1 hour)\n *  * **lmtp** - if true, uses LMTP instead of SMTP protocol\n *  * **logger** - bunyan compatible logger interface\n *  * **debug** - if true pass SMTP traffic to the logger\n *  * **tls** - options for createCredentials\n *  * **socket** - existing socket to use instead of creating a new one (see: http://nodejs.org/api/net.html#net_class_net_socket)\n *  * **secured** - boolean indicates that the provided socket has already been upgraded to tls\n *\n * @constructor\n * @namespace SMTP Client module\n * @param {Object} [options] Option properties\n */\nclass SMTPConnection extends EventEmitter {\n    constructor(options) {\n        super(options);\n\n        this.id = crypto.randomBytes(8).toString('base64').replace(/\\W/g, '');\n        this.stage = 'init';\n\n        this.options = options || {};\n\n        this.secureConnection = !!this.options.secure;\n        this.alreadySecured = !!this.options.secured;\n\n        this.port = Number(this.options.port) || (this.secureConnection ? 465 : 587);\n        this.host = this.options.host || 'localhost';\n\n        this.allowInternalNetworkInterfaces = this.options.allowInternalNetworkInterfaces || false;\n\n        if (typeof this.options.secure === 'undefined' && this.port === 465) {\n            // if secure option is not set but port is 465, then default to secure\n            this.secureConnection = true;\n        }\n\n        this.name = this.options.name || this._getHostname();\n\n        this.logger = shared.getLogger(this.options, {\n            component: this.options.component || 'smtp-connection',\n            sid: this.id\n        });\n\n        this.customAuth = new Map();\n        Object.keys(this.options.customAuth || {}).forEach(key => {\n            let mapKey = (key || '').toString().trim().toUpperCase();\n            if (!mapKey) {\n                return;\n            }\n            this.customAuth.set(mapKey, this.options.customAuth[key]);\n        });\n\n        /**\n         * Expose version nr, just for the reference\n         * @type {String}\n         */\n        this.version = packageInfo.version;\n\n        /**\n         * If true, then the user is authenticated\n         * @type {Boolean}\n         */\n        this.authenticated = false;\n\n        /**\n         * If set to true, this instance is no longer active\n         * @private\n         */\n        this.destroyed = false;\n\n        /**\n         * Defines if the current connection is secure or not. If not,\n         * STARTTLS can be used if available\n         * @private\n         */\n        this.secure = !!this.secureConnection;\n\n        /**\n         * Store incomplete messages coming from the server\n         * @private\n         */\n        this._remainder = '';\n\n        /**\n         * Unprocessed responses from the server\n         * @type {Array}\n         */\n        this._responseQueue = [];\n\n        this.lastServerResponse = false;\n\n        /**\n         * The socket connecting to the server\n         * @publick\n         */\n        this._socket = false;\n\n        /**\n         * Lists supported auth mechanisms\n         * @private\n         */\n        this._supportedAuth = [];\n\n        /**\n         * Set to true, if EHLO response includes \"AUTH\".\n         * If false then authentication is not tried\n         */\n        this.allowsAuth = false;\n\n        /**\n         * Includes current envelope (from, to)\n         * @private\n         */\n        this._envelope = false;\n\n        /**\n         * Lists supported extensions\n         * @private\n         */\n        this._supportedExtensions = [];\n\n        /**\n         * Defines the maximum allowed size for a single message\n         * @private\n         */\n        this._maxAllowedSize = 0;\n\n        /**\n         * Function queue to run if a data chunk comes from the server\n         * @private\n         */\n        this._responseActions = [];\n        this._recipientQueue = [];\n\n        /**\n         * Timeout variable for waiting the greeting\n         * @private\n         */\n        this._greetingTimeout = false;\n\n        /**\n         * Timeout variable for waiting the connection to start\n         * @private\n         */\n        this._connectionTimeout = false;\n\n        /**\n         * If the socket is deemed already closed\n         * @private\n         */\n        this._destroyed = false;\n\n        /**\n         * If the socket is already being closed\n         * @private\n         */\n        this._closing = false;\n\n        /**\n         * Callbacks for socket's listeners\n         */\n        this._onSocketData = chunk => this._onData(chunk);\n        this._onSocketError = error => this._onError(error, 'ESOCKET', false, 'CONN');\n        this._onSocketClose = () => this._onClose();\n        this._onSocketEnd = () => this._onEnd();\n        this._onSocketTimeout = () => this._onTimeout();\n    }\n\n    /**\n     * Creates a connection to a SMTP server and sets up connection\n     * listener\n     */\n    connect(connectCallback) {\n        if (typeof connectCallback === 'function') {\n            this.once('connect', () => {\n                this.logger.debug(\n                    {\n                        tnx: 'smtp'\n                    },\n                    'SMTP handshake finished'\n                );\n                connectCallback();\n            });\n\n            const isDestroyedMessage = this._isDestroyedMessage('connect');\n            if (isDestroyedMessage) {\n                return connectCallback(this._formatError(isDestroyedMessage, 'ECONNECTION', false, 'CONN'));\n            }\n        }\n\n        let opts = {\n            port: this.port,\n            host: this.host,\n            allowInternalNetworkInterfaces: this.allowInternalNetworkInterfaces\n        };\n\n        if (this.options.localAddress) {\n            opts.localAddress = this.options.localAddress;\n        }\n\n        let setupConnectionHandlers = () => {\n            this._connectionTimeout = setTimeout(() => {\n                this._onError('Connection timeout', 'ETIMEDOUT', false, 'CONN');\n            }, this.options.connectionTimeout || CONNECTION_TIMEOUT);\n\n            this._socket.on('error', this._onSocketError);\n        };\n\n        if (this.options.connection) {\n            // connection is already opened\n            this._socket = this.options.connection;\n            if (this.secureConnection && !this.alreadySecured) {\n                setImmediate(() =>\n                    this._upgradeConnection(err => {\n                        if (err) {\n                            this._onError(new Error('Error initiating TLS - ' + (err.message || err)), 'ETLS', false, 'CONN');\n                            return;\n                        }\n                        this._onConnect();\n                    })\n                );\n            } else {\n                setImmediate(() => this._onConnect());\n            }\n            return;\n        } else if (this.options.socket) {\n            // socket object is set up but not yet connected\n            this._socket = this.options.socket;\n            return shared.resolveHostname(opts, (err, resolved) => {\n                if (err) {\n                    return setImmediate(() => this._onError(err, 'EDNS', false, 'CONN'));\n                }\n                this.logger.debug(\n                    {\n                        tnx: 'dns',\n                        source: opts.host,\n                        resolved: resolved.host,\n                        cached: !!resolved.cached\n                    },\n                    'Resolved %s as %s [cache %s]',\n                    opts.host,\n                    resolved.host,\n                    resolved.cached ? 'hit' : 'miss'\n                );\n                Object.keys(resolved).forEach(key => {\n                    if (key.charAt(0) !== '_' && resolved[key]) {\n                        opts[key] = resolved[key];\n                    }\n                });\n                try {\n                    this._socket.connect(this.port, this.host, () => {\n                        this._socket.setKeepAlive(true);\n                        this._onConnect();\n                    });\n                    setupConnectionHandlers();\n                } catch (E) {\n                    return setImmediate(() => this._onError(E, 'ECONNECTION', false, 'CONN'));\n                }\n            });\n        } else if (this.secureConnection) {\n            // connect using tls\n            if (this.options.tls) {\n                Object.keys(this.options.tls).forEach(key => {\n                    opts[key] = this.options.tls[key];\n                });\n            }\n            return shared.resolveHostname(opts, (err, resolved) => {\n                if (err) {\n                    return setImmediate(() => this._onError(err, 'EDNS', false, 'CONN'));\n                }\n                this.logger.debug(\n                    {\n                        tnx: 'dns',\n                        source: opts.host,\n                        resolved: resolved.host,\n                        cached: !!resolved.cached\n                    },\n                    'Resolved %s as %s [cache %s]',\n                    opts.host,\n                    resolved.host,\n                    resolved.cached ? 'hit' : 'miss'\n                );\n                Object.keys(resolved).forEach(key => {\n                    if (key.charAt(0) !== '_' && resolved[key]) {\n                        opts[key] = resolved[key];\n                    }\n                });\n                try {\n                    this._socket = tls.connect(opts, () => {\n                        this._socket.setKeepAlive(true);\n                        this._onConnect();\n                    });\n                    setupConnectionHandlers();\n                } catch (E) {\n                    return setImmediate(() => this._onError(E, 'ECONNECTION', false, 'CONN'));\n                }\n            });\n        } else {\n            // connect using plaintext\n            return shared.resolveHostname(opts, (err, resolved) => {\n                if (err) {\n                    return setImmediate(() => this._onError(err, 'EDNS', false, 'CONN'));\n                }\n                this.logger.debug(\n                    {\n                        tnx: 'dns',\n                        source: opts.host,\n                        resolved: resolved.host,\n                        cached: !!resolved.cached\n                    },\n                    'Resolved %s as %s [cache %s]',\n                    opts.host,\n                    resolved.host,\n                    resolved.cached ? 'hit' : 'miss'\n                );\n                Object.keys(resolved).forEach(key => {\n                    if (key.charAt(0) !== '_' && resolved[key]) {\n                        opts[key] = resolved[key];\n                    }\n                });\n                try {\n                    this._socket = net.connect(opts, () => {\n                        this._socket.setKeepAlive(true);\n                        this._onConnect();\n                    });\n                    setupConnectionHandlers();\n                } catch (E) {\n                    return setImmediate(() => this._onError(E, 'ECONNECTION', false, 'CONN'));\n                }\n            });\n        }\n    }\n\n    /**\n     * Sends QUIT\n     */\n    quit() {\n        this._sendCommand('QUIT');\n        this._responseActions.push(this.close);\n    }\n\n    /**\n     * Closes the connection to the server\n     */\n    close() {\n        clearTimeout(this._connectionTimeout);\n        clearTimeout(this._greetingTimeout);\n        this._responseActions = [];\n\n        // allow to run this function only once\n        if (this._closing) {\n            return;\n        }\n        this._closing = true;\n\n        let closeMethod = 'end';\n\n        if (this.stage === 'init') {\n            // Close the socket immediately when connection timed out\n            closeMethod = 'destroy';\n        }\n\n        this.logger.debug(\n            {\n                tnx: 'smtp'\n            },\n            'Closing connection to the server using \"%s\"',\n            closeMethod\n        );\n\n        let socket = (this._socket && this._socket.socket) || this._socket;\n\n        if (socket && !socket.destroyed) {\n            try {\n                this._socket[closeMethod]();\n            } catch (E) {\n                // just ignore\n            }\n        }\n\n        this._destroy();\n    }\n\n    /**\n     * Authenticate user\n     */\n    login(authData, callback) {\n        const isDestroyedMessage = this._isDestroyedMessage('login');\n        if (isDestroyedMessage) {\n            return callback(this._formatError(isDestroyedMessage, 'ECONNECTION', false, 'API'));\n        }\n\n        this._auth = authData || {};\n        // Select SASL authentication method\n        this._authMethod = (this._auth.method || '').toString().trim().toUpperCase() || false;\n\n        if (!this._authMethod && this._auth.oauth2 && !this._auth.credentials) {\n            this._authMethod = 'XOAUTH2';\n        } else if (!this._authMethod || (this._authMethod === 'XOAUTH2' && !this._auth.oauth2)) {\n            // use first supported\n            this._authMethod = (this._supportedAuth[0] || 'PLAIN').toUpperCase().trim();\n        }\n\n        if (this._authMethod !== 'XOAUTH2' && (!this._auth.credentials || !this._auth.credentials.user || !this._auth.credentials.pass)) {\n            if (this._auth.user && this._auth.pass) {\n                this._auth.credentials = {\n                    user: this._auth.user,\n                    pass: this._auth.pass,\n                    options: this._auth.options\n                };\n            } else {\n                return callback(this._formatError('Missing credentials for \"' + this._authMethod + '\"', 'EAUTH', false, 'API'));\n            }\n        }\n\n        if (this.customAuth.has(this._authMethod)) {\n            let handler = this.customAuth.get(this._authMethod);\n            let lastResponse;\n            let returned = false;\n\n            let resolve = () => {\n                if (returned) {\n                    return;\n                }\n                returned = true;\n                this.logger.info(\n                    {\n                        tnx: 'smtp',\n                        username: this._auth.user,\n                        action: 'authenticated',\n                        method: this._authMethod\n                    },\n                    'User %s authenticated',\n                    JSON.stringify(this._auth.user)\n                );\n                this.authenticated = true;\n                callback(null, true);\n            };\n\n            let reject = err => {\n                if (returned) {\n                    return;\n                }\n                returned = true;\n                callback(this._formatError(err, 'EAUTH', lastResponse, 'AUTH ' + this._authMethod));\n            };\n\n            let handlerResponse = handler({\n                auth: this._auth,\n                method: this._authMethod,\n\n                extensions: [].concat(this._supportedExtensions),\n                authMethods: [].concat(this._supportedAuth),\n                maxAllowedSize: this._maxAllowedSize || false,\n\n                sendCommand: (cmd, done) => {\n                    let promise;\n\n                    if (!done) {\n                        promise = new Promise((resolve, reject) => {\n                            done = shared.callbackPromise(resolve, reject);\n                        });\n                    }\n\n                    this._responseActions.push(str => {\n                        lastResponse = str;\n\n                        let codes = str.match(/^(\\d+)(?:\\s(\\d+\\.\\d+\\.\\d+))?\\s/);\n                        let data = {\n                            command: cmd,\n                            response: str\n                        };\n                        if (codes) {\n                            data.status = Number(codes[1]) || 0;\n                            if (codes[2]) {\n                                data.code = codes[2];\n                            }\n                            data.text = str.substr(codes[0].length);\n                        } else {\n                            data.text = str;\n                            data.status = 0; // just in case we need to perform numeric comparisons\n                        }\n                        done(null, data);\n                    });\n                    setImmediate(() => this._sendCommand(cmd));\n\n                    return promise;\n                },\n\n                resolve,\n                reject\n            });\n\n            if (handlerResponse && typeof handlerResponse.catch === 'function') {\n                // a promise was returned\n                handlerResponse.then(resolve).catch(reject);\n            }\n\n            return;\n        }\n\n        switch (this._authMethod) {\n            case 'XOAUTH2':\n                this._handleXOauth2Token(false, callback);\n                return;\n            case 'LOGIN':\n                this._responseActions.push(str => {\n                    this._actionAUTH_LOGIN_USER(str, callback);\n                });\n                this._sendCommand('AUTH LOGIN');\n                return;\n            case 'PLAIN':\n                this._responseActions.push(str => {\n                    this._actionAUTHComplete(str, callback);\n                });\n                this._sendCommand(\n                    'AUTH PLAIN ' +\n                        Buffer.from(\n                            //this._auth.user+'\\u0000'+\n                            '\\u0000' + // skip authorization identity as it causes problems with some servers\n                                this._auth.credentials.user +\n                                '\\u0000' +\n                                this._auth.credentials.pass,\n                            'utf-8'\n                        ).toString('base64'),\n                    // log entry without passwords\n                    'AUTH PLAIN ' +\n                        Buffer.from(\n                            //this._auth.user+'\\u0000'+\n                            '\\u0000' + // skip authorization identity as it causes problems with some servers\n                                this._auth.credentials.user +\n                                '\\u0000' +\n                                '/* secret */',\n                            'utf-8'\n                        ).toString('base64')\n                );\n                return;\n            case 'CRAM-MD5':\n                this._responseActions.push(str => {\n                    this._actionAUTH_CRAM_MD5(str, callback);\n                });\n                this._sendCommand('AUTH CRAM-MD5');\n                return;\n        }\n\n        return callback(this._formatError('Unknown authentication method \"' + this._authMethod + '\"', 'EAUTH', false, 'API'));\n    }\n\n    /**\n     * Sends a message\n     *\n     * @param {Object} envelope Envelope object, {from: addr, to: [addr]}\n     * @param {Object} message String, Buffer or a Stream\n     * @param {Function} callback Callback to return once sending is completed\n     */\n    send(envelope, message, done) {\n        if (!message) {\n            return done(this._formatError('Empty message', 'EMESSAGE', false, 'API'));\n        }\n\n        const isDestroyedMessage = this._isDestroyedMessage('send message');\n        if (isDestroyedMessage) {\n            return done(this._formatError(isDestroyedMessage, 'ECONNECTION', false, 'API'));\n        }\n\n        // reject larger messages than allowed\n        if (this._maxAllowedSize && envelope.size > this._maxAllowedSize) {\n            return setImmediate(() => {\n                done(this._formatError('Message size larger than allowed ' + this._maxAllowedSize, 'EMESSAGE', false, 'MAIL FROM'));\n            });\n        }\n\n        // ensure that callback is only called once\n        let returned = false;\n        let callback = function () {\n            if (returned) {\n                return;\n            }\n            returned = true;\n\n            done(...arguments);\n        };\n\n        if (typeof message.on === 'function') {\n            message.on('error', err => callback(this._formatError(err, 'ESTREAM', false, 'API')));\n        }\n\n        let startTime = Date.now();\n        this._setEnvelope(envelope, (err, info) => {\n            if (err) {\n                return callback(err);\n            }\n            let envelopeTime = Date.now();\n            let stream = this._createSendStream((err, str) => {\n                if (err) {\n                    return callback(err);\n                }\n\n                info.envelopeTime = envelopeTime - startTime;\n                info.messageTime = Date.now() - envelopeTime;\n                info.messageSize = stream.outByteCount;\n                info.response = str;\n\n                return callback(null, info);\n            });\n            if (typeof message.pipe === 'function') {\n                message.pipe(stream);\n            } else {\n                stream.write(message);\n                stream.end();\n            }\n        });\n    }\n\n    /**\n     * Resets connection state\n     *\n     * @param {Function} callback Callback to return once connection is reset\n     */\n    reset(callback) {\n        this._sendCommand('RSET');\n        this._responseActions.push(str => {\n            if (str.charAt(0) !== '2') {\n                return callback(this._formatError('Could not reset session state. response=' + str, 'EPROTOCOL', str, 'RSET'));\n            }\n            this._envelope = false;\n            return callback(null, true);\n        });\n    }\n\n    /**\n     * Connection listener that is run when the connection to\n     * the server is opened\n     *\n     * @event\n     */\n    _onConnect() {\n        clearTimeout(this._connectionTimeout);\n\n        this.logger.info(\n            {\n                tnx: 'network',\n                localAddress: this._socket.localAddress,\n                localPort: this._socket.localPort,\n                remoteAddress: this._socket.remoteAddress,\n                remotePort: this._socket.remotePort\n            },\n            '%s established to %s:%s',\n            this.secure ? 'Secure connection' : 'Connection',\n            this._socket.remoteAddress,\n            this._socket.remotePort\n        );\n\n        if (this._destroyed) {\n            // Connection was established after we already had canceled it\n            this.close();\n            return;\n        }\n\n        this.stage = 'connected';\n\n        // clear existing listeners for the socket\n        this._socket.removeListener('data', this._onSocketData);\n        this._socket.removeListener('timeout', this._onSocketTimeout);\n        this._socket.removeListener('close', this._onSocketClose);\n        this._socket.removeListener('end', this._onSocketEnd);\n\n        this._socket.on('data', this._onSocketData);\n        this._socket.once('close', this._onSocketClose);\n        this._socket.once('end', this._onSocketEnd);\n\n        this._socket.setTimeout(this.options.socketTimeout || SOCKET_TIMEOUT);\n        this._socket.on('timeout', this._onSocketTimeout);\n\n        this._greetingTimeout = setTimeout(() => {\n            // if still waiting for greeting, give up\n            if (this._socket && !this._destroyed && this._responseActions[0] === this._actionGreeting) {\n                this._onError('Greeting never received', 'ETIMEDOUT', false, 'CONN');\n            }\n        }, this.options.greetingTimeout || GREETING_TIMEOUT);\n\n        this._responseActions.push(this._actionGreeting);\n\n        // we have a 'data' listener set up so resume socket if it was paused\n        this._socket.resume();\n    }\n\n    /**\n     * 'data' listener for data coming from the server\n     *\n     * @event\n     * @param {Buffer} chunk Data chunk coming from the server\n     */\n    _onData(chunk) {\n        if (this._destroyed || !chunk || !chunk.length) {\n            return;\n        }\n\n        let data = (chunk || '').toString('binary');\n        let lines = (this._remainder + data).split(/\\r?\\n/);\n        let lastline;\n\n        this._remainder = lines.pop();\n\n        for (let i = 0, len = lines.length; i < len; i++) {\n            if (this._responseQueue.length) {\n                lastline = this._responseQueue[this._responseQueue.length - 1];\n                if (/^\\d+-/.test(lastline.split('\\n').pop())) {\n                    this._responseQueue[this._responseQueue.length - 1] += '\\n' + lines[i];\n                    continue;\n                }\n            }\n            this._responseQueue.push(lines[i]);\n        }\n\n        if (this._responseQueue.length) {\n            lastline = this._responseQueue[this._responseQueue.length - 1];\n            if (/^\\d+-/.test(lastline.split('\\n').pop())) {\n                return;\n            }\n        }\n\n        this._processResponse();\n    }\n\n    /**\n     * 'error' listener for the socket\n     *\n     * @event\n     * @param {Error} err Error object\n     * @param {String} type Error name\n     */\n    _onError(err, type, data, command) {\n        clearTimeout(this._connectionTimeout);\n        clearTimeout(this._greetingTimeout);\n\n        if (this._destroyed) {\n            // just ignore, already closed\n            // this might happen when a socket is canceled because of reached timeout\n            // but the socket timeout error itself receives only after\n            return;\n        }\n\n        err = this._formatError(err, type, data, command);\n\n        this.logger.error(data, err.message);\n\n        this.emit('error', err);\n        this.close();\n    }\n\n    _formatError(message, type, response, command) {\n        let err;\n\n        if (/Error\\]$/i.test(Object.prototype.toString.call(message))) {\n            err = message;\n        } else {\n            err = new Error(message);\n        }\n\n        if (type && type !== 'Error') {\n            err.code = type;\n        }\n\n        if (response) {\n            err.response = response;\n            err.message += ': ' + response;\n        }\n\n        let responseCode = (typeof response === 'string' && Number((response.match(/^\\d+/) || [])[0])) || false;\n        if (responseCode) {\n            err.responseCode = responseCode;\n        }\n\n        if (command) {\n            err.command = command;\n        }\n\n        return err;\n    }\n\n    /**\n     * 'close' listener for the socket\n     *\n     * @event\n     */\n    _onClose() {\n        this.logger.info(\n            {\n                tnx: 'network'\n            },\n            'Connection closed'\n        );\n\n        if (this.upgrading && !this._destroyed) {\n            return this._onError(new Error('Connection closed unexpectedly'), 'ETLS', false, 'CONN');\n        } else if (![this._actionGreeting, this.close].includes(this._responseActions[0]) && !this._destroyed) {\n            return this._onError(new Error('Connection closed unexpectedly'), 'ECONNECTION', false, 'CONN');\n        }\n\n        this._destroy();\n    }\n\n    /**\n     * 'end' listener for the socket\n     *\n     * @event\n     */\n    _onEnd() {\n        if (this._socket && !this._socket.destroyed) {\n            this._socket.destroy();\n        }\n    }\n\n    /**\n     * 'timeout' listener for the socket\n     *\n     * @event\n     */\n    _onTimeout() {\n        return this._onError(new Error('Timeout'), 'ETIMEDOUT', false, 'CONN');\n    }\n\n    /**\n     * Destroys the client, emits 'end'\n     */\n    _destroy() {\n        if (this._destroyed) {\n            return;\n        }\n        this._destroyed = true;\n        this.emit('end');\n    }\n\n    /**\n     * Upgrades the connection to TLS\n     *\n     * @param {Function} callback Callback function to run when the connection\n     *        has been secured\n     */\n    _upgradeConnection(callback) {\n        // do not remove all listeners or it breaks node v0.10 as there's\n        // apparently a 'finish' event set that would be cleared as well\n\n        // we can safely keep 'error', 'end', 'close' etc. events\n        this._socket.removeListener('data', this._onSocketData); // incoming data is going to be gibberish from this point onwards\n        this._socket.removeListener('timeout', this._onSocketTimeout); // timeout will be re-set for the new socket object\n\n        let socketPlain = this._socket;\n        let opts = {\n            socket: this._socket,\n            host: this.host\n        };\n\n        Object.keys(this.options.tls || {}).forEach(key => {\n            opts[key] = this.options.tls[key];\n        });\n\n        this.upgrading = true;\n        // tls.connect is not an asynchronous function however it may still throw errors and requires to be wrapped with try/catch\n        try {\n            this._socket = tls.connect(opts, () => {\n                this.secure = true;\n                this.upgrading = false;\n                this._socket.on('data', this._onSocketData);\n\n                socketPlain.removeListener('close', this._onSocketClose);\n                socketPlain.removeListener('end', this._onSocketEnd);\n\n                return callback(null, true);\n            });\n        } catch (err) {\n            return callback(err);\n        }\n\n        this._socket.on('error', this._onSocketError);\n        this._socket.once('close', this._onSocketClose);\n        this._socket.once('end', this._onSocketEnd);\n\n        this._socket.setTimeout(this.options.socketTimeout || SOCKET_TIMEOUT); // 10 min.\n        this._socket.on('timeout', this._onSocketTimeout);\n\n        // resume in case the socket was paused\n        socketPlain.resume();\n    }\n\n    /**\n     * Processes queued responses from the server\n     *\n     * @param {Boolean} force If true, ignores _processing flag\n     */\n    _processResponse() {\n        if (!this._responseQueue.length) {\n            return false;\n        }\n\n        let str = (this.lastServerResponse = (this._responseQueue.shift() || '').toString());\n\n        if (/^\\d+-/.test(str.split('\\n').pop())) {\n            // keep waiting for the final part of multiline response\n            return;\n        }\n\n        if (this.options.debug || this.options.transactionLog) {\n            this.logger.debug(\n                {\n                    tnx: 'server'\n                },\n                str.replace(/\\r?\\n$/, '')\n            );\n        }\n\n        if (!str.trim()) {\n            // skip unexpected empty lines\n            setImmediate(() => this._processResponse(true));\n        }\n\n        let action = this._responseActions.shift();\n\n        if (typeof action === 'function') {\n            action.call(this, str);\n            setImmediate(() => this._processResponse(true));\n        } else {\n            return this._onError(new Error('Unexpected Response'), 'EPROTOCOL', str, 'CONN');\n        }\n    }\n\n    /**\n     * Send a command to the server, append \\r\\n\n     *\n     * @param {String} str String to be sent to the server\n     * @param {String} logStr Optional string to be used for logging instead of the actual string\n     */\n    _sendCommand(str, logStr) {\n        if (this._destroyed) {\n            // Connection already closed, can't send any more data\n            return;\n        }\n\n        if (this._socket.destroyed) {\n            return this.close();\n        }\n\n        if (this.options.debug || this.options.transactionLog) {\n            this.logger.debug(\n                {\n                    tnx: 'client'\n                },\n                (logStr || str || '').toString().replace(/\\r?\\n$/, '')\n            );\n        }\n\n        this._socket.write(Buffer.from(str + '\\r\\n', 'utf-8'));\n    }\n\n    /**\n     * Initiates a new message by submitting envelope data, starting with\n     * MAIL FROM: command\n     *\n     * @param {Object} envelope Envelope object in the form of\n     *        {from:'...', to:['...']}\n     *        or\n     *        {from:{address:'...',name:'...'}, to:[address:'...',name:'...']}\n     */\n    _setEnvelope(envelope, callback) {\n        let args = [];\n        let useSmtpUtf8 = false;\n\n        this._envelope = envelope || {};\n        this._envelope.from = ((this._envelope.from && this._envelope.from.address) || this._envelope.from || '').toString().trim();\n\n        this._envelope.to = [].concat(this._envelope.to || []).map(to => ((to && to.address) || to || '').toString().trim());\n\n        if (!this._envelope.to.length) {\n            return callback(this._formatError('No recipients defined', 'EENVELOPE', false, 'API'));\n        }\n\n        if (this._envelope.from && /[\\r\\n<>]/.test(this._envelope.from)) {\n            return callback(this._formatError('Invalid sender ' + JSON.stringify(this._envelope.from), 'EENVELOPE', false, 'API'));\n        }\n\n        // check if the sender address uses only ASCII characters,\n        // otherwise require usage of SMTPUTF8 extension\n        if (/[\\x80-\\uFFFF]/.test(this._envelope.from)) {\n            useSmtpUtf8 = true;\n        }\n\n        for (let i = 0, len = this._envelope.to.length; i < len; i++) {\n            if (!this._envelope.to[i] || /[\\r\\n<>]/.test(this._envelope.to[i])) {\n                return callback(this._formatError('Invalid recipient ' + JSON.stringify(this._envelope.to[i]), 'EENVELOPE', false, 'API'));\n            }\n\n            // check if the recipients addresses use only ASCII characters,\n            // otherwise require usage of SMTPUTF8 extension\n            if (/[\\x80-\\uFFFF]/.test(this._envelope.to[i])) {\n                useSmtpUtf8 = true;\n            }\n        }\n\n        // clone the recipients array for latter manipulation\n        this._envelope.rcptQueue = JSON.parse(JSON.stringify(this._envelope.to || []));\n        this._envelope.rejected = [];\n        this._envelope.rejectedErrors = [];\n        this._envelope.accepted = [];\n\n        if (this._envelope.dsn) {\n            try {\n                this._envelope.dsn = this._setDsnEnvelope(this._envelope.dsn);\n            } catch (err) {\n                return callback(this._formatError('Invalid DSN ' + err.message, 'EENVELOPE', false, 'API'));\n            }\n        }\n\n        this._responseActions.push(str => {\n            this._actionMAIL(str, callback);\n        });\n\n        // If the server supports SMTPUTF8 and the envelope includes an internationalized\n        // email address then append SMTPUTF8 keyword to the MAIL FROM command\n        if (useSmtpUtf8 && this._supportedExtensions.includes('SMTPUTF8')) {\n            args.push('SMTPUTF8');\n            this._usingSmtpUtf8 = true;\n        }\n\n        // If the server supports 8BITMIME and the message might contain non-ascii bytes\n        // then append the 8BITMIME keyword to the MAIL FROM command\n        if (this._envelope.use8BitMime && this._supportedExtensions.includes('8BITMIME')) {\n            args.push('BODY=8BITMIME');\n            this._using8BitMime = true;\n        }\n\n        if (this._envelope.size && this._supportedExtensions.includes('SIZE')) {\n            args.push('SIZE=' + this._envelope.size);\n        }\n\n        // If the server supports DSN and the envelope includes an DSN prop\n        // then append DSN params to the MAIL FROM command\n        if (this._envelope.dsn && this._supportedExtensions.includes('DSN')) {\n            if (this._envelope.dsn.ret) {\n                args.push('RET=' + shared.encodeXText(this._envelope.dsn.ret));\n            }\n            if (this._envelope.dsn.envid) {\n                args.push('ENVID=' + shared.encodeXText(this._envelope.dsn.envid));\n            }\n        }\n\n        this._sendCommand('MAIL FROM:<' + this._envelope.from + '>' + (args.length ? ' ' + args.join(' ') : ''));\n    }\n\n    _setDsnEnvelope(params) {\n        let ret = (params.ret || params.return || '').toString().toUpperCase() || null;\n        if (ret) {\n            switch (ret) {\n                case 'HDRS':\n                case 'HEADERS':\n                    ret = 'HDRS';\n                    break;\n                case 'FULL':\n                case 'BODY':\n                    ret = 'FULL';\n                    break;\n            }\n        }\n\n        if (ret && !['FULL', 'HDRS'].includes(ret)) {\n            throw new Error('ret: ' + JSON.stringify(ret));\n        }\n\n        let envid = (params.envid || params.id || '').toString() || null;\n\n        let notify = params.notify || null;\n        if (notify) {\n            if (typeof notify === 'string') {\n                notify = notify.split(',');\n            }\n            notify = notify.map(n => n.trim().toUpperCase());\n            let validNotify = ['NEVER', 'SUCCESS', 'FAILURE', 'DELAY'];\n            let invaliNotify = notify.filter(n => !validNotify.includes(n));\n            if (invaliNotify.length || (notify.length > 1 && notify.includes('NEVER'))) {\n                throw new Error('notify: ' + JSON.stringify(notify.join(',')));\n            }\n            notify = notify.join(',');\n        }\n\n        let orcpt = (params.recipient || params.orcpt || '').toString() || null;\n        if (orcpt && orcpt.indexOf(';') < 0) {\n            orcpt = 'rfc822;' + orcpt;\n        }\n\n        return {\n            ret,\n            envid,\n            notify,\n            orcpt\n        };\n    }\n\n    _getDsnRcptToArgs() {\n        let args = [];\n        // If the server supports DSN and the envelope includes an DSN prop\n        // then append DSN params to the RCPT TO command\n        if (this._envelope.dsn && this._supportedExtensions.includes('DSN')) {\n            if (this._envelope.dsn.notify) {\n                args.push('NOTIFY=' + shared.encodeXText(this._envelope.dsn.notify));\n            }\n            if (this._envelope.dsn.orcpt) {\n                args.push('ORCPT=' + shared.encodeXText(this._envelope.dsn.orcpt));\n            }\n        }\n        return args.length ? ' ' + args.join(' ') : '';\n    }\n\n    _createSendStream(callback) {\n        let dataStream = new DataStream();\n        let logStream;\n\n        if (this.options.lmtp) {\n            this._envelope.accepted.forEach((recipient, i) => {\n                let final = i === this._envelope.accepted.length - 1;\n                this._responseActions.push(str => {\n                    this._actionLMTPStream(recipient, final, str, callback);\n                });\n            });\n        } else {\n            this._responseActions.push(str => {\n                this._actionSMTPStream(str, callback);\n            });\n        }\n\n        dataStream.pipe(this._socket, {\n            end: false\n        });\n\n        if (this.options.debug) {\n            logStream = new PassThrough();\n            logStream.on('readable', () => {\n                let chunk;\n                while ((chunk = logStream.read())) {\n                    this.logger.debug(\n                        {\n                            tnx: 'message'\n                        },\n                        chunk.toString('binary').replace(/\\r?\\n$/, '')\n                    );\n                }\n            });\n            dataStream.pipe(logStream);\n        }\n\n        dataStream.once('end', () => {\n            this.logger.info(\n                {\n                    tnx: 'message',\n                    inByteCount: dataStream.inByteCount,\n                    outByteCount: dataStream.outByteCount\n                },\n                '<%s bytes encoded mime message (source size %s bytes)>',\n                dataStream.outByteCount,\n                dataStream.inByteCount\n            );\n        });\n\n        return dataStream;\n    }\n\n    /** ACTIONS **/\n\n    /**\n     * Will be run after the connection is created and the server sends\n     * a greeting. If the incoming message starts with 220 initiate\n     * SMTP session by sending EHLO command\n     *\n     * @param {String} str Message from the server\n     */\n    _actionGreeting(str) {\n        clearTimeout(this._greetingTimeout);\n\n        if (str.substr(0, 3) !== '220') {\n            this._onError(new Error('Invalid greeting. response=' + str), 'EPROTOCOL', str, 'CONN');\n            return;\n        }\n\n        if (this.options.lmtp) {\n            this._responseActions.push(this._actionLHLO);\n            this._sendCommand('LHLO ' + this.name);\n        } else {\n            this._responseActions.push(this._actionEHLO);\n            this._sendCommand('EHLO ' + this.name);\n        }\n    }\n\n    /**\n     * Handles server response for LHLO command. If it yielded in\n     * error, emit 'error', otherwise treat this as an EHLO response\n     *\n     * @param {String} str Message from the server\n     */\n    _actionLHLO(str) {\n        if (str.charAt(0) !== '2') {\n            this._onError(new Error('Invalid LHLO. response=' + str), 'EPROTOCOL', str, 'LHLO');\n            return;\n        }\n\n        this._actionEHLO(str);\n    }\n\n    /**\n     * Handles server response for EHLO command. If it yielded in\n     * error, try HELO instead, otherwise initiate TLS negotiation\n     * if STARTTLS is supported by the server or move into the\n     * authentication phase.\n     *\n     * @param {String} str Message from the server\n     */\n    _actionEHLO(str) {\n        let match;\n\n        if (str.substr(0, 3) === '421') {\n            this._onError(new Error('Server terminates connection. response=' + str), 'ECONNECTION', str, 'EHLO');\n            return;\n        }\n\n        if (str.charAt(0) !== '2') {\n            if (this.options.requireTLS) {\n                this._onError(new Error('EHLO failed but HELO does not support required STARTTLS. response=' + str), 'ECONNECTION', str, 'EHLO');\n                return;\n            }\n\n            // Try HELO instead\n            this._responseActions.push(this._actionHELO);\n            this._sendCommand('HELO ' + this.name);\n            return;\n        }\n\n        // Detect if the server supports STARTTLS\n        if (!this.secure && !this.options.ignoreTLS && (/[ -]STARTTLS\\b/im.test(str) || this.options.requireTLS)) {\n            this._sendCommand('STARTTLS');\n            this._responseActions.push(this._actionSTARTTLS);\n            return;\n        }\n\n        // Detect if the server supports SMTPUTF8\n        if (/[ -]SMTPUTF8\\b/im.test(str)) {\n            this._supportedExtensions.push('SMTPUTF8');\n        }\n\n        // Detect if the server supports DSN\n        if (/[ -]DSN\\b/im.test(str)) {\n            this._supportedExtensions.push('DSN');\n        }\n\n        // Detect if the server supports 8BITMIME\n        if (/[ -]8BITMIME\\b/im.test(str)) {\n            this._supportedExtensions.push('8BITMIME');\n        }\n\n        // Detect if the server supports PIPELINING\n        if (/[ -]PIPELINING\\b/im.test(str)) {\n            this._supportedExtensions.push('PIPELINING');\n        }\n\n        // Detect if the server supports AUTH\n        if (/[ -]AUTH\\b/i.test(str)) {\n            this.allowsAuth = true;\n        }\n\n        // Detect if the server supports PLAIN auth\n        if (/[ -]AUTH(?:(\\s+|=)[^\\n]*\\s+|\\s+|=)PLAIN/i.test(str)) {\n            this._supportedAuth.push('PLAIN');\n        }\n\n        // Detect if the server supports LOGIN auth\n        if (/[ -]AUTH(?:(\\s+|=)[^\\n]*\\s+|\\s+|=)LOGIN/i.test(str)) {\n            this._supportedAuth.push('LOGIN');\n        }\n\n        // Detect if the server supports CRAM-MD5 auth\n        if (/[ -]AUTH(?:(\\s+|=)[^\\n]*\\s+|\\s+|=)CRAM-MD5/i.test(str)) {\n            this._supportedAuth.push('CRAM-MD5');\n        }\n\n        // Detect if the server supports XOAUTH2 auth\n        if (/[ -]AUTH(?:(\\s+|=)[^\\n]*\\s+|\\s+|=)XOAUTH2/i.test(str)) {\n            this._supportedAuth.push('XOAUTH2');\n        }\n\n        // Detect if the server supports SIZE extensions (and the max allowed size)\n        if ((match = str.match(/[ -]SIZE(?:[ \\t]+(\\d+))?/im))) {\n            this._supportedExtensions.push('SIZE');\n            this._maxAllowedSize = Number(match[1]) || 0;\n        }\n\n        this.emit('connect');\n    }\n\n    /**\n     * Handles server response for HELO command. If it yielded in\n     * error, emit 'error', otherwise move into the authentication phase.\n     *\n     * @param {String} str Message from the server\n     */\n    _actionHELO(str) {\n        if (str.charAt(0) !== '2') {\n            this._onError(new Error('Invalid HELO. response=' + str), 'EPROTOCOL', str, 'HELO');\n            return;\n        }\n\n        // assume that authentication is enabled (most probably is not though)\n        this.allowsAuth = true;\n\n        this.emit('connect');\n    }\n\n    /**\n     * Handles server response for STARTTLS command. If there's an error\n     * try HELO instead, otherwise initiate TLS upgrade. If the upgrade\n     * succeedes restart the EHLO\n     *\n     * @param {String} str Message from the server\n     */\n    _actionSTARTTLS(str) {\n        if (str.charAt(0) !== '2') {\n            if (this.options.opportunisticTLS) {\n                this.logger.info(\n                    {\n                        tnx: 'smtp'\n                    },\n                    'Failed STARTTLS upgrade, continuing unencrypted'\n                );\n                return this.emit('connect');\n            }\n            this._onError(new Error('Error upgrading connection with STARTTLS'), 'ETLS', str, 'STARTTLS');\n            return;\n        }\n\n        this._upgradeConnection((err, secured) => {\n            if (err) {\n                this._onError(new Error('Error initiating TLS - ' + (err.message || err)), 'ETLS', false, 'STARTTLS');\n                return;\n            }\n\n            this.logger.info(\n                {\n                    tnx: 'smtp'\n                },\n                'Connection upgraded with STARTTLS'\n            );\n\n            if (secured) {\n                // restart session\n                if (this.options.lmtp) {\n                    this._responseActions.push(this._actionLHLO);\n                    this._sendCommand('LHLO ' + this.name);\n                } else {\n                    this._responseActions.push(this._actionEHLO);\n                    this._sendCommand('EHLO ' + this.name);\n                }\n            } else {\n                this.emit('connect');\n            }\n        });\n    }\n\n    /**\n     * Handle the response for AUTH LOGIN command. We are expecting\n     * '334 VXNlcm5hbWU6' (base64 for 'Username:'). Data to be sent as\n     * response needs to be base64 encoded username. We do not need\n     * exact match but settle with 334 response in general as some\n     * hosts invalidly use a longer message than VXNlcm5hbWU6\n     *\n     * @param {String} str Message from the server\n     */\n    _actionAUTH_LOGIN_USER(str, callback) {\n        if (!/^334[ -]/.test(str)) {\n            // expecting '334 VXNlcm5hbWU6'\n            callback(this._formatError('Invalid login sequence while waiting for \"334 VXNlcm5hbWU6\"', 'EAUTH', str, 'AUTH LOGIN'));\n            return;\n        }\n\n        this._responseActions.push(str => {\n            this._actionAUTH_LOGIN_PASS(str, callback);\n        });\n\n        this._sendCommand(Buffer.from(this._auth.credentials.user + '', 'utf-8').toString('base64'));\n    }\n\n    /**\n     * Handle the response for AUTH CRAM-MD5 command. We are expecting\n     * '334 <challenge string>'. Data to be sent as response needs to be\n     * base64 decoded challenge string, MD5 hashed using the password as\n     * a HMAC key, prefixed by the username and a space, and finally all\n     * base64 encoded again.\n     *\n     * @param {String} str Message from the server\n     */\n    _actionAUTH_CRAM_MD5(str, callback) {\n        let challengeMatch = str.match(/^334\\s+(.+)$/);\n        let challengeString = '';\n\n        if (!challengeMatch) {\n            return callback(this._formatError('Invalid login sequence while waiting for server challenge string', 'EAUTH', str, 'AUTH CRAM-MD5'));\n        } else {\n            challengeString = challengeMatch[1];\n        }\n\n        // Decode from base64\n        let base64decoded = Buffer.from(challengeString, 'base64').toString('ascii'),\n            hmacMD5 = crypto.createHmac('md5', this._auth.credentials.pass);\n\n        hmacMD5.update(base64decoded);\n\n        let prepended = this._auth.credentials.user + ' ' + hmacMD5.digest('hex');\n\n        this._responseActions.push(str => {\n            this._actionAUTH_CRAM_MD5_PASS(str, callback);\n        });\n\n        this._sendCommand(\n            Buffer.from(prepended).toString('base64'),\n            // hidden hash for logs\n            Buffer.from(this._auth.credentials.user + ' /* secret */').toString('base64')\n        );\n    }\n\n    /**\n     * Handles the response to CRAM-MD5 authentication, if there's no error,\n     * the user can be considered logged in. Start waiting for a message to send\n     *\n     * @param {String} str Message from the server\n     */\n    _actionAUTH_CRAM_MD5_PASS(str, callback) {\n        if (!str.match(/^235\\s+/)) {\n            return callback(this._formatError('Invalid login sequence while waiting for \"235\"', 'EAUTH', str, 'AUTH CRAM-MD5'));\n        }\n\n        this.logger.info(\n            {\n                tnx: 'smtp',\n                username: this._auth.user,\n                action: 'authenticated',\n                method: this._authMethod\n            },\n            'User %s authenticated',\n            JSON.stringify(this._auth.user)\n        );\n        this.authenticated = true;\n        callback(null, true);\n    }\n\n    /**\n     * Handle the response for AUTH LOGIN command. We are expecting\n     * '334 UGFzc3dvcmQ6' (base64 for 'Password:'). Data to be sent as\n     * response needs to be base64 encoded password.\n     *\n     * @param {String} str Message from the server\n     */\n    _actionAUTH_LOGIN_PASS(str, callback) {\n        if (!/^334[ -]/.test(str)) {\n            // expecting '334 UGFzc3dvcmQ6'\n            return callback(this._formatError('Invalid login sequence while waiting for \"334 UGFzc3dvcmQ6\"', 'EAUTH', str, 'AUTH LOGIN'));\n        }\n\n        this._responseActions.push(str => {\n            this._actionAUTHComplete(str, callback);\n        });\n\n        this._sendCommand(\n            Buffer.from((this._auth.credentials.pass || '').toString(), 'utf-8').toString('base64'),\n            // Hidden pass for logs\n            Buffer.from('/* secret */', 'utf-8').toString('base64')\n        );\n    }\n\n    /**\n     * Handles the response for authentication, if there's no error,\n     * the user can be considered logged in. Start waiting for a message to send\n     *\n     * @param {String} str Message from the server\n     */\n    _actionAUTHComplete(str, isRetry, callback) {\n        if (!callback && typeof isRetry === 'function') {\n            callback = isRetry;\n            isRetry = false;\n        }\n\n        if (str.substr(0, 3) === '334') {\n            this._responseActions.push(str => {\n                if (isRetry || this._authMethod !== 'XOAUTH2') {\n                    this._actionAUTHComplete(str, true, callback);\n                } else {\n                    // fetch a new OAuth2 access token\n                    setImmediate(() => this._handleXOauth2Token(true, callback));\n                }\n            });\n            this._sendCommand('');\n            return;\n        }\n\n        if (str.charAt(0) !== '2') {\n            this.logger.info(\n                {\n                    tnx: 'smtp',\n                    username: this._auth.user,\n                    action: 'authfail',\n                    method: this._authMethod\n                },\n                'User %s failed to authenticate',\n                JSON.stringify(this._auth.user)\n            );\n            return callback(this._formatError('Invalid login', 'EAUTH', str, 'AUTH ' + this._authMethod));\n        }\n\n        this.logger.info(\n            {\n                tnx: 'smtp',\n                username: this._auth.user,\n                action: 'authenticated',\n                method: this._authMethod\n            },\n            'User %s authenticated',\n            JSON.stringify(this._auth.user)\n        );\n        this.authenticated = true;\n        callback(null, true);\n    }\n\n    /**\n     * Handle response for a MAIL FROM: command\n     *\n     * @param {String} str Message from the server\n     */\n    _actionMAIL(str, callback) {\n        let message, curRecipient;\n        if (Number(str.charAt(0)) !== 2) {\n            if (this._usingSmtpUtf8 && /^550 /.test(str) && /[\\x80-\\uFFFF]/.test(this._envelope.from)) {\n                message = 'Internationalized mailbox name not allowed';\n            } else {\n                message = 'Mail command failed';\n            }\n            return callback(this._formatError(message, 'EENVELOPE', str, 'MAIL FROM'));\n        }\n\n        if (!this._envelope.rcptQueue.length) {\n            return callback(this._formatError('Can\\x27t send mail - no recipients defined', 'EENVELOPE', false, 'API'));\n        } else {\n            this._recipientQueue = [];\n\n            if (this._supportedExtensions.includes('PIPELINING')) {\n                while (this._envelope.rcptQueue.length) {\n                    curRecipient = this._envelope.rcptQueue.shift();\n                    this._recipientQueue.push(curRecipient);\n                    this._responseActions.push(str => {\n                        this._actionRCPT(str, callback);\n                    });\n                    this._sendCommand('RCPT TO:<' + curRecipient + '>' + this._getDsnRcptToArgs());\n                }\n            } else {\n                curRecipient = this._envelope.rcptQueue.shift();\n                this._recipientQueue.push(curRecipient);\n                this._responseActions.push(str => {\n                    this._actionRCPT(str, callback);\n                });\n                this._sendCommand('RCPT TO:<' + curRecipient + '>' + this._getDsnRcptToArgs());\n            }\n        }\n    }\n\n    /**\n     * Handle response for a RCPT TO: command\n     *\n     * @param {String} str Message from the server\n     */\n    _actionRCPT(str, callback) {\n        let message,\n            err,\n            curRecipient = this._recipientQueue.shift();\n        if (Number(str.charAt(0)) !== 2) {\n            // this is a soft error\n            if (this._usingSmtpUtf8 && /^553 /.test(str) && /[\\x80-\\uFFFF]/.test(curRecipient)) {\n                message = 'Internationalized mailbox name not allowed';\n            } else {\n                message = 'Recipient command failed';\n            }\n            this._envelope.rejected.push(curRecipient);\n            // store error for the failed recipient\n            err = this._formatError(message, 'EENVELOPE', str, 'RCPT TO');\n            err.recipient = curRecipient;\n            this._envelope.rejectedErrors.push(err);\n        } else {\n            this._envelope.accepted.push(curRecipient);\n        }\n\n        if (!this._envelope.rcptQueue.length && !this._recipientQueue.length) {\n            if (this._envelope.rejected.length < this._envelope.to.length) {\n                this._responseActions.push(str => {\n                    this._actionDATA(str, callback);\n                });\n                this._sendCommand('DATA');\n            } else {\n                err = this._formatError('Can\\x27t send mail - all recipients were rejected', 'EENVELOPE', str, 'RCPT TO');\n                err.rejected = this._envelope.rejected;\n                err.rejectedErrors = this._envelope.rejectedErrors;\n                return callback(err);\n            }\n        } else if (this._envelope.rcptQueue.length) {\n            curRecipient = this._envelope.rcptQueue.shift();\n            this._recipientQueue.push(curRecipient);\n            this._responseActions.push(str => {\n                this._actionRCPT(str, callback);\n            });\n            this._sendCommand('RCPT TO:<' + curRecipient + '>' + this._getDsnRcptToArgs());\n        }\n    }\n\n    /**\n     * Handle response for a DATA command\n     *\n     * @param {String} str Message from the server\n     */\n    _actionDATA(str, callback) {\n        // response should be 354 but according to this issue https://github.com/eleith/emailjs/issues/24\n        // some servers might use 250 instead, so lets check for 2 or 3 as the first digit\n        if (!/^[23]/.test(str)) {\n            return callback(this._formatError('Data command failed', 'EENVELOPE', str, 'DATA'));\n        }\n\n        let response = {\n            accepted: this._envelope.accepted,\n            rejected: this._envelope.rejected\n        };\n\n        if (this._envelope.rejectedErrors.length) {\n            response.rejectedErrors = this._envelope.rejectedErrors;\n        }\n\n        callback(null, response);\n    }\n\n    /**\n     * Handle response for a DATA stream when using SMTP\n     * We expect a single response that defines if the sending succeeded or failed\n     *\n     * @param {String} str Message from the server\n     */\n    _actionSMTPStream(str, callback) {\n        if (Number(str.charAt(0)) !== 2) {\n            // Message failed\n            return callback(this._formatError('Message failed', 'EMESSAGE', str, 'DATA'));\n        } else {\n            // Message sent succesfully\n            return callback(null, str);\n        }\n    }\n\n    /**\n     * Handle response for a DATA stream\n     * We expect a separate response for every recipient. All recipients can either\n     * succeed or fail separately\n     *\n     * @param {String} recipient The recipient this response applies to\n     * @param {Boolean} final Is this the final recipient?\n     * @param {String} str Message from the server\n     */\n    _actionLMTPStream(recipient, final, str, callback) {\n        let err;\n        if (Number(str.charAt(0)) !== 2) {\n            // Message failed\n            err = this._formatError('Message failed for recipient ' + recipient, 'EMESSAGE', str, 'DATA');\n            err.recipient = recipient;\n            this._envelope.rejected.push(recipient);\n            this._envelope.rejectedErrors.push(err);\n            for (let i = 0, len = this._envelope.accepted.length; i < len; i++) {\n                if (this._envelope.accepted[i] === recipient) {\n                    this._envelope.accepted.splice(i, 1);\n                }\n            }\n        }\n        if (final) {\n            return callback(null, str);\n        }\n    }\n\n    _handleXOauth2Token(isRetry, callback) {\n        this._auth.oauth2.getToken(isRetry, (err, accessToken) => {\n            if (err) {\n                this.logger.info(\n                    {\n                        tnx: 'smtp',\n                        username: this._auth.user,\n                        action: 'authfail',\n                        method: this._authMethod\n                    },\n                    'User %s failed to authenticate',\n                    JSON.stringify(this._auth.user)\n                );\n                return callback(this._formatError(err, 'EAUTH', false, 'AUTH XOAUTH2'));\n            }\n            this._responseActions.push(str => {\n                this._actionAUTHComplete(str, isRetry, callback);\n            });\n            this._sendCommand(\n                'AUTH XOAUTH2 ' + this._auth.oauth2.buildXOAuth2Token(accessToken),\n                //  Hidden for logs\n                'AUTH XOAUTH2 ' + this._auth.oauth2.buildXOAuth2Token('/* secret */')\n            );\n        });\n    }\n\n    /**\n     *\n     * @param {string} command\n     * @private\n     */\n    _isDestroyedMessage(command) {\n        if (this._destroyed) {\n            return 'Cannot ' + command + ' - smtp connection is already destroyed.';\n        }\n\n        if (this._socket) {\n            if (this._socket.destroyed) {\n                return 'Cannot ' + command + ' - smtp connection socket is already destroyed.';\n            }\n\n            if (!this._socket.writable) {\n                return 'Cannot ' + command + ' - smtp connection socket is already half-closed.';\n            }\n        }\n    }\n\n    _getHostname() {\n        // defaul hostname is machine hostname or [IP]\n        let defaultHostname;\n        try {\n            defaultHostname = os.hostname() || '';\n        } catch (err) {\n            // fails on windows 7\n            defaultHostname = 'localhost';\n        }\n\n        // ignore if not FQDN\n        if (!defaultHostname || defaultHostname.indexOf('.') < 0) {\n            defaultHostname = '[127.0.0.1]';\n        }\n\n        // IP should be enclosed in []\n        if (defaultHostname.match(/^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/)) {\n            defaultHostname = '[' + defaultHostname + ']';\n        }\n\n        return defaultHostname;\n    }\n}\n\nmodule.exports = SMTPConnection;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}