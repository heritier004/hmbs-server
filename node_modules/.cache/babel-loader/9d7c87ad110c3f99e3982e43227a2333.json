{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/heritier/repos/github/hmbs-server/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/Users/heritier/repos/github/hmbs-server/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _inherits = require(\"/Users/heritier/repos/github/hmbs-server/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"/Users/heritier/repos/github/hmbs-server/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nvar SMTPConnection = require('../smtp-connection');\n\nvar assign = require('../shared').assign;\n\nvar XOAuth2 = require('../xoauth2');\n\nvar EventEmitter = require('events');\n/**\n * Creates an element for the pool\n *\n * @constructor\n * @param {Object} options SMTPPool instance\n */\n\n\nvar PoolResource = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(PoolResource, _EventEmitter);\n\n  var _super = _createSuper(PoolResource);\n\n  function PoolResource(pool) {\n    var _this;\n\n    _classCallCheck(this, PoolResource);\n\n    _this = _super.call(this);\n    _this.pool = pool;\n    _this.options = pool.options;\n    _this.logger = _this.pool.logger;\n\n    if (_this.options.auth) {\n      switch ((_this.options.auth.type || '').toString().toUpperCase()) {\n        case 'OAUTH2':\n          {\n            var oauth2 = new XOAuth2(_this.options.auth, _this.logger);\n            oauth2.provisionCallback = _this.pool.mailer && _this.pool.mailer.get('oauth2_provision_cb') || oauth2.provisionCallback;\n            _this.auth = {\n              type: 'OAUTH2',\n              user: _this.options.auth.user,\n              oauth2: oauth2,\n              method: 'XOAUTH2'\n            };\n            oauth2.on('token', function (token) {\n              return _this.pool.mailer.emit('token', token);\n            });\n            oauth2.on('error', function (err) {\n              return _this.emit('error', err);\n            });\n            break;\n          }\n\n        default:\n          if (!_this.options.auth.user && !_this.options.auth.pass) {\n            break;\n          }\n\n          _this.auth = {\n            type: (_this.options.auth.type || '').toString().toUpperCase() || 'LOGIN',\n            user: _this.options.auth.user,\n            credentials: {\n              user: _this.options.auth.user || '',\n              pass: _this.options.auth.pass,\n              options: _this.options.auth.options\n            },\n            method: (_this.options.auth.method || '').trim().toUpperCase() || _this.options.authMethod || false\n          };\n      }\n    }\n\n    _this._connection = false;\n    _this._connected = false;\n    _this.messages = 0;\n    _this.available = true;\n    return _this;\n  }\n  /**\n   * Initiates a connection to the SMTP server\n   *\n   * @param {Function} callback Callback function to run once the connection is established or failed\n   */\n\n\n  _createClass(PoolResource, [{\n    key: \"connect\",\n    value: function connect(callback) {\n      var _this2 = this;\n\n      this.pool.getSocket(this.options, function (err, socketOptions) {\n        if (err) {\n          return callback(err);\n        }\n\n        var returned = false;\n        var options = _this2.options;\n\n        if (socketOptions && socketOptions.connection) {\n          _this2.logger.info({\n            tnx: 'proxy',\n            remoteAddress: socketOptions.connection.remoteAddress,\n            remotePort: socketOptions.connection.remotePort,\n            destHost: options.host || '',\n            destPort: options.port || '',\n            action: 'connected'\n          }, 'Using proxied socket from %s:%s to %s:%s', socketOptions.connection.remoteAddress, socketOptions.connection.remotePort, options.host || '', options.port || '');\n\n          options = assign(false, options);\n          Object.keys(socketOptions).forEach(function (key) {\n            options[key] = socketOptions[key];\n          });\n        }\n\n        _this2.connection = new SMTPConnection(options);\n\n        _this2.connection.once('error', function (err) {\n          _this2.emit('error', err);\n\n          if (returned) {\n            return;\n          }\n\n          returned = true;\n          return callback(err);\n        });\n\n        _this2.connection.once('end', function () {\n          _this2.close();\n\n          if (returned) {\n            return;\n          }\n\n          returned = true;\n          var timer = setTimeout(function () {\n            if (returned) {\n              return;\n            } // still have not returned, this means we have an unexpected connection close\n\n\n            var err = new Error('Unexpected socket close');\n\n            if (_this2.connection && _this2.connection._socket && _this2.connection._socket.upgrading) {\n              // starttls connection errors\n              err.code = 'ETLS';\n            }\n\n            callback(err);\n          }, 1000);\n\n          try {\n            timer.unref();\n          } catch (E) {// Ignore. Happens on envs with non-node timer implementation\n          }\n        });\n\n        _this2.connection.connect(function () {\n          if (returned) {\n            return;\n          }\n\n          if (_this2.auth && (_this2.connection.allowsAuth || options.forceAuth)) {\n            _this2.connection.login(_this2.auth, function (err) {\n              if (returned) {\n                return;\n              }\n\n              returned = true;\n\n              if (err) {\n                _this2.connection.close();\n\n                _this2.emit('error', err);\n\n                return callback(err);\n              }\n\n              _this2._connected = true;\n              callback(null, true);\n            });\n          } else {\n            returned = true;\n            _this2._connected = true;\n            return callback(null, true);\n          }\n        });\n      });\n    }\n    /**\n     * Sends an e-mail to be sent using the selected settings\n     *\n     * @param {Object} mail Mail object\n     * @param {Function} callback Callback function\n     */\n\n  }, {\n    key: \"send\",\n    value: function send(mail, callback) {\n      var _this3 = this;\n\n      if (!this._connected) {\n        return this.connect(function (err) {\n          if (err) {\n            return callback(err);\n          }\n\n          return _this3.send(mail, callback);\n        });\n      }\n\n      var envelope = mail.message.getEnvelope();\n      var messageId = mail.message.messageId();\n      var recipients = [].concat(envelope.to || []);\n\n      if (recipients.length > 3) {\n        recipients.push('...and ' + recipients.splice(2).length + ' more');\n      }\n\n      this.logger.info({\n        tnx: 'send',\n        messageId: messageId,\n        cid: this.id\n      }, 'Sending message %s using #%s to <%s>', messageId, this.id, recipients.join(', '));\n\n      if (mail.data.dsn) {\n        envelope.dsn = mail.data.dsn;\n      }\n\n      this.connection.send(envelope, mail.message.createReadStream(), function (err, info) {\n        _this3.messages++;\n\n        if (err) {\n          _this3.connection.close();\n\n          _this3.emit('error', err);\n\n          return callback(err);\n        }\n\n        info.envelope = {\n          from: envelope.from,\n          to: envelope.to\n        };\n        info.messageId = messageId;\n        setImmediate(function () {\n          var err;\n\n          if (_this3.messages >= _this3.options.maxMessages) {\n            err = new Error('Resource exhausted');\n            err.code = 'EMAXLIMIT';\n\n            _this3.connection.close();\n\n            _this3.emit('error', err);\n          } else {\n            _this3.pool._checkRateLimit(function () {\n              _this3.available = true;\n\n              _this3.emit('available');\n            });\n          }\n        });\n        callback(null, info);\n      });\n    }\n    /**\n     * Closes the connection\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      this._connected = false;\n\n      if (this.auth && this.auth.oauth2) {\n        this.auth.oauth2.removeAllListeners();\n      }\n\n      if (this.connection) {\n        this.connection.close();\n      }\n\n      this.emit('close');\n    }\n  }]);\n\n  return PoolResource;\n}(EventEmitter);\n\nmodule.exports = PoolResource;","map":{"version":3,"names":["SMTPConnection","require","assign","XOAuth2","EventEmitter","PoolResource","pool","options","logger","auth","type","toString","toUpperCase","oauth2","provisionCallback","mailer","get","user","method","on","token","emit","err","pass","credentials","trim","authMethod","_connection","_connected","messages","available","callback","getSocket","socketOptions","returned","connection","info","tnx","remoteAddress","remotePort","destHost","host","destPort","port","action","Object","keys","forEach","key","once","close","timer","setTimeout","Error","_socket","upgrading","code","unref","E","connect","allowsAuth","forceAuth","login","mail","send","envelope","message","getEnvelope","messageId","recipients","concat","to","length","push","splice","cid","id","join","data","dsn","createReadStream","from","setImmediate","maxMessages","_checkRateLimit","removeAllListeners","module","exports"],"sources":["/Users/heritier/repos/github/hmbs-server/node_modules/nodemailer/lib/smtp-pool/pool-resource.js"],"sourcesContent":["'use strict';\n\nconst SMTPConnection = require('../smtp-connection');\nconst assign = require('../shared').assign;\nconst XOAuth2 = require('../xoauth2');\nconst EventEmitter = require('events');\n\n/**\n * Creates an element for the pool\n *\n * @constructor\n * @param {Object} options SMTPPool instance\n */\nclass PoolResource extends EventEmitter {\n    constructor(pool) {\n        super();\n\n        this.pool = pool;\n        this.options = pool.options;\n        this.logger = this.pool.logger;\n\n        if (this.options.auth) {\n            switch ((this.options.auth.type || '').toString().toUpperCase()) {\n                case 'OAUTH2': {\n                    let oauth2 = new XOAuth2(this.options.auth, this.logger);\n                    oauth2.provisionCallback = (this.pool.mailer && this.pool.mailer.get('oauth2_provision_cb')) || oauth2.provisionCallback;\n                    this.auth = {\n                        type: 'OAUTH2',\n                        user: this.options.auth.user,\n                        oauth2,\n                        method: 'XOAUTH2'\n                    };\n                    oauth2.on('token', token => this.pool.mailer.emit('token', token));\n                    oauth2.on('error', err => this.emit('error', err));\n                    break;\n                }\n                default:\n                    if (!this.options.auth.user && !this.options.auth.pass) {\n                        break;\n                    }\n                    this.auth = {\n                        type: (this.options.auth.type || '').toString().toUpperCase() || 'LOGIN',\n                        user: this.options.auth.user,\n                        credentials: {\n                            user: this.options.auth.user || '',\n                            pass: this.options.auth.pass,\n                            options: this.options.auth.options\n                        },\n                        method: (this.options.auth.method || '').trim().toUpperCase() || this.options.authMethod || false\n                    };\n            }\n        }\n\n        this._connection = false;\n        this._connected = false;\n\n        this.messages = 0;\n        this.available = true;\n    }\n\n    /**\n     * Initiates a connection to the SMTP server\n     *\n     * @param {Function} callback Callback function to run once the connection is established or failed\n     */\n    connect(callback) {\n        this.pool.getSocket(this.options, (err, socketOptions) => {\n            if (err) {\n                return callback(err);\n            }\n\n            let returned = false;\n            let options = this.options;\n            if (socketOptions && socketOptions.connection) {\n                this.logger.info(\n                    {\n                        tnx: 'proxy',\n                        remoteAddress: socketOptions.connection.remoteAddress,\n                        remotePort: socketOptions.connection.remotePort,\n                        destHost: options.host || '',\n                        destPort: options.port || '',\n                        action: 'connected'\n                    },\n                    'Using proxied socket from %s:%s to %s:%s',\n                    socketOptions.connection.remoteAddress,\n                    socketOptions.connection.remotePort,\n                    options.host || '',\n                    options.port || ''\n                );\n\n                options = assign(false, options);\n                Object.keys(socketOptions).forEach(key => {\n                    options[key] = socketOptions[key];\n                });\n            }\n\n            this.connection = new SMTPConnection(options);\n\n            this.connection.once('error', err => {\n                this.emit('error', err);\n                if (returned) {\n                    return;\n                }\n                returned = true;\n                return callback(err);\n            });\n\n            this.connection.once('end', () => {\n                this.close();\n                if (returned) {\n                    return;\n                }\n                returned = true;\n\n                let timer = setTimeout(() => {\n                    if (returned) {\n                        return;\n                    }\n                    // still have not returned, this means we have an unexpected connection close\n                    let err = new Error('Unexpected socket close');\n                    if (this.connection && this.connection._socket && this.connection._socket.upgrading) {\n                        // starttls connection errors\n                        err.code = 'ETLS';\n                    }\n                    callback(err);\n                }, 1000);\n\n                try {\n                    timer.unref();\n                } catch (E) {\n                    // Ignore. Happens on envs with non-node timer implementation\n                }\n            });\n\n            this.connection.connect(() => {\n                if (returned) {\n                    return;\n                }\n\n                if (this.auth && (this.connection.allowsAuth || options.forceAuth)) {\n                    this.connection.login(this.auth, err => {\n                        if (returned) {\n                            return;\n                        }\n                        returned = true;\n\n                        if (err) {\n                            this.connection.close();\n                            this.emit('error', err);\n                            return callback(err);\n                        }\n\n                        this._connected = true;\n                        callback(null, true);\n                    });\n                } else {\n                    returned = true;\n                    this._connected = true;\n                    return callback(null, true);\n                }\n            });\n        });\n    }\n\n    /**\n     * Sends an e-mail to be sent using the selected settings\n     *\n     * @param {Object} mail Mail object\n     * @param {Function} callback Callback function\n     */\n    send(mail, callback) {\n        if (!this._connected) {\n            return this.connect(err => {\n                if (err) {\n                    return callback(err);\n                }\n                return this.send(mail, callback);\n            });\n        }\n\n        let envelope = mail.message.getEnvelope();\n        let messageId = mail.message.messageId();\n\n        let recipients = [].concat(envelope.to || []);\n        if (recipients.length > 3) {\n            recipients.push('...and ' + recipients.splice(2).length + ' more');\n        }\n        this.logger.info(\n            {\n                tnx: 'send',\n                messageId,\n                cid: this.id\n            },\n            'Sending message %s using #%s to <%s>',\n            messageId,\n            this.id,\n            recipients.join(', ')\n        );\n\n        if (mail.data.dsn) {\n            envelope.dsn = mail.data.dsn;\n        }\n\n        this.connection.send(envelope, mail.message.createReadStream(), (err, info) => {\n            this.messages++;\n\n            if (err) {\n                this.connection.close();\n                this.emit('error', err);\n                return callback(err);\n            }\n\n            info.envelope = {\n                from: envelope.from,\n                to: envelope.to\n            };\n            info.messageId = messageId;\n\n            setImmediate(() => {\n                let err;\n                if (this.messages >= this.options.maxMessages) {\n                    err = new Error('Resource exhausted');\n                    err.code = 'EMAXLIMIT';\n                    this.connection.close();\n                    this.emit('error', err);\n                } else {\n                    this.pool._checkRateLimit(() => {\n                        this.available = true;\n                        this.emit('available');\n                    });\n                }\n            });\n\n            callback(null, info);\n        });\n    }\n\n    /**\n     * Closes the connection\n     */\n    close() {\n        this._connected = false;\n        if (this.auth && this.auth.oauth2) {\n            this.auth.oauth2.removeAllListeners();\n        }\n        if (this.connection) {\n            this.connection.close();\n        }\n        this.emit('close');\n    }\n}\n\nmodule.exports = PoolResource;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}