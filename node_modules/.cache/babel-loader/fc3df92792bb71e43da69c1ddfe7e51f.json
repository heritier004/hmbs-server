{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/heritier/repos/github/hmbs-server/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/Users/heritier/repos/github/hmbs-server/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar packageData = require('../../package.json');\n\nvar shared = require('../shared');\n/**\n * Generates a Transport object for streaming\n *\n * Possible options can be the following:\n *\n *  * **buffer** if true, then returns the message as a Buffer object instead of a stream\n *  * **newline** either 'windows' or 'unix'\n *\n * @constructor\n * @param {Object} optional config parameter\n */\n\n\nvar StreamTransport = /*#__PURE__*/function () {\n  function StreamTransport(options) {\n    _classCallCheck(this, StreamTransport);\n\n    options = options || {};\n    this.options = options || {};\n    this.name = 'StreamTransport';\n    this.version = packageData.version;\n    this.logger = shared.getLogger(this.options, {\n      component: this.options.component || 'stream-transport'\n    });\n    this.winbreak = ['win', 'windows', 'dos', '\\r\\n'].includes((options.newline || '').toString().toLowerCase());\n  }\n  /**\n   * Compiles a mailcomposer message and forwards it to handler that sends it\n   *\n   * @param {Object} emailMessage MailComposer object\n   * @param {Function} callback Callback function to run when the sending is completed\n   */\n\n\n  _createClass(StreamTransport, [{\n    key: \"send\",\n    value: function send(mail, done) {\n      var _this = this;\n\n      // We probably need this in the output\n      mail.message.keepBcc = true;\n      var envelope = mail.data.envelope || mail.message.getEnvelope();\n      var messageId = mail.message.messageId();\n      var recipients = [].concat(envelope.to || []);\n\n      if (recipients.length > 3) {\n        recipients.push('...and ' + recipients.splice(2).length + ' more');\n      }\n\n      this.logger.info({\n        tnx: 'send',\n        messageId: messageId\n      }, 'Sending message %s to <%s> using %s line breaks', messageId, recipients.join(', '), this.winbreak ? '<CR><LF>' : '<LF>');\n      setImmediate(function () {\n        var stream;\n\n        try {\n          stream = mail.message.createReadStream();\n        } catch (E) {\n          _this.logger.error({\n            err: E,\n            tnx: 'send',\n            messageId: messageId\n          }, 'Creating send stream failed for %s. %s', messageId, E.message);\n\n          return done(E);\n        }\n\n        if (!_this.options.buffer) {\n          stream.once('error', function (err) {\n            _this.logger.error({\n              err: err,\n              tnx: 'send',\n              messageId: messageId\n            }, 'Failed creating message for %s. %s', messageId, err.message);\n          });\n          return done(null, {\n            envelope: mail.data.envelope || mail.message.getEnvelope(),\n            messageId: messageId,\n            message: stream\n          });\n        }\n\n        var chunks = [];\n        var chunklen = 0;\n        stream.on('readable', function () {\n          var chunk;\n\n          while ((chunk = stream.read()) !== null) {\n            chunks.push(chunk);\n            chunklen += chunk.length;\n          }\n        });\n        stream.once('error', function (err) {\n          _this.logger.error({\n            err: err,\n            tnx: 'send',\n            messageId: messageId\n          }, 'Failed creating message for %s. %s', messageId, err.message);\n\n          return done(err);\n        });\n        stream.on('end', function () {\n          return done(null, {\n            envelope: mail.data.envelope || mail.message.getEnvelope(),\n            messageId: messageId,\n            message: Buffer.concat(chunks, chunklen)\n          });\n        });\n      });\n    }\n  }]);\n\n  return StreamTransport;\n}();\n\nmodule.exports = StreamTransport;","map":{"version":3,"names":["packageData","require","shared","StreamTransport","options","name","version","logger","getLogger","component","winbreak","includes","newline","toString","toLowerCase","mail","done","message","keepBcc","envelope","data","getEnvelope","messageId","recipients","concat","to","length","push","splice","info","tnx","join","setImmediate","stream","createReadStream","E","error","err","buffer","once","chunks","chunklen","on","chunk","read","Buffer","module","exports"],"sources":["/Users/heritier/repos/github/hmbs-server/node_modules/nodemailer/lib/stream-transport/index.js"],"sourcesContent":["'use strict';\n\nconst packageData = require('../../package.json');\nconst shared = require('../shared');\n\n/**\n * Generates a Transport object for streaming\n *\n * Possible options can be the following:\n *\n *  * **buffer** if true, then returns the message as a Buffer object instead of a stream\n *  * **newline** either 'windows' or 'unix'\n *\n * @constructor\n * @param {Object} optional config parameter\n */\nclass StreamTransport {\n    constructor(options) {\n        options = options || {};\n\n        this.options = options || {};\n\n        this.name = 'StreamTransport';\n        this.version = packageData.version;\n\n        this.logger = shared.getLogger(this.options, {\n            component: this.options.component || 'stream-transport'\n        });\n\n        this.winbreak = ['win', 'windows', 'dos', '\\r\\n'].includes((options.newline || '').toString().toLowerCase());\n    }\n\n    /**\n     * Compiles a mailcomposer message and forwards it to handler that sends it\n     *\n     * @param {Object} emailMessage MailComposer object\n     * @param {Function} callback Callback function to run when the sending is completed\n     */\n    send(mail, done) {\n        // We probably need this in the output\n        mail.message.keepBcc = true;\n\n        let envelope = mail.data.envelope || mail.message.getEnvelope();\n        let messageId = mail.message.messageId();\n\n        let recipients = [].concat(envelope.to || []);\n        if (recipients.length > 3) {\n            recipients.push('...and ' + recipients.splice(2).length + ' more');\n        }\n        this.logger.info(\n            {\n                tnx: 'send',\n                messageId\n            },\n            'Sending message %s to <%s> using %s line breaks',\n            messageId,\n            recipients.join(', '),\n            this.winbreak ? '<CR><LF>' : '<LF>'\n        );\n\n        setImmediate(() => {\n            let stream;\n\n            try {\n                stream = mail.message.createReadStream();\n            } catch (E) {\n                this.logger.error(\n                    {\n                        err: E,\n                        tnx: 'send',\n                        messageId\n                    },\n                    'Creating send stream failed for %s. %s',\n                    messageId,\n                    E.message\n                );\n                return done(E);\n            }\n\n            if (!this.options.buffer) {\n                stream.once('error', err => {\n                    this.logger.error(\n                        {\n                            err,\n                            tnx: 'send',\n                            messageId\n                        },\n                        'Failed creating message for %s. %s',\n                        messageId,\n                        err.message\n                    );\n                });\n                return done(null, {\n                    envelope: mail.data.envelope || mail.message.getEnvelope(),\n                    messageId,\n                    message: stream\n                });\n            }\n\n            let chunks = [];\n            let chunklen = 0;\n            stream.on('readable', () => {\n                let chunk;\n                while ((chunk = stream.read()) !== null) {\n                    chunks.push(chunk);\n                    chunklen += chunk.length;\n                }\n            });\n\n            stream.once('error', err => {\n                this.logger.error(\n                    {\n                        err,\n                        tnx: 'send',\n                        messageId\n                    },\n                    'Failed creating message for %s. %s',\n                    messageId,\n                    err.message\n                );\n                return done(err);\n            });\n\n            stream.on('end', () =>\n                done(null, {\n                    envelope: mail.data.envelope || mail.message.getEnvelope(),\n                    messageId,\n                    message: Buffer.concat(chunks, chunklen)\n                })\n            );\n        });\n    }\n}\n\nmodule.exports = StreamTransport;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}